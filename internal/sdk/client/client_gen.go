// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package client

import (
	"context"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) *Client {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type AWSEnvSpecFragment struct {
	LoadBalancers         AWSEnvSpecFragment_LoadBalancers         "json:\"loadBalancers\" graphql:\"loadBalancers\""
	LoadBalancingStrategy LoadBalancingStrategy                    "json:\"loadBalancingStrategy\" graphql:\"loadBalancingStrategy\""
	CustomDomain          *string                                  "json:\"customDomain,omitempty\" graphql:\"customDomain\""
	NodeGroups            []*AWSEnvSpecFragment_NodeGroups         "json:\"nodeGroups\" graphql:\"nodeGroups\""
	MaintenanceWindows    []*AWSEnvSpecFragment_MaintenanceWindows "json:\"maintenanceWindows\" graphql:\"maintenanceWindows\""
	Region                string                                   "json:\"region\" graphql:\"region\""
	Zones                 []string                                 "json:\"zones\" graphql:\"zones\""
	Cidr                  string                                   "json:\"cidr\" graphql:\"cidr\""
	AwsAccountID          string                                   "json:\"awsAccountID\" graphql:\"awsAccountID\""
	PeeringConnections    []*AWSEnvSpecFragment_PeeringConnections "json:\"peeringConnections\" graphql:\"peeringConnections\""
	Endpoints             []*AWSEnvSpecFragment_Endpoints          "json:\"endpoints\" graphql:\"endpoints\""
	Tags                  []*AWSEnvSpecFragment_Tags               "json:\"tags\" graphql:\"tags\""
	CloudConnect          bool                                     "json:\"cloudConnect\" graphql:\"cloudConnect\""
}

func (t *AWSEnvSpecFragment) GetLoadBalancers() *AWSEnvSpecFragment_LoadBalancers {
	if t == nil {
		t = &AWSEnvSpecFragment{}
	}
	return &t.LoadBalancers
}
func (t *AWSEnvSpecFragment) GetLoadBalancingStrategy() *LoadBalancingStrategy {
	if t == nil {
		t = &AWSEnvSpecFragment{}
	}
	return &t.LoadBalancingStrategy
}
func (t *AWSEnvSpecFragment) GetCustomDomain() *string {
	if t == nil {
		t = &AWSEnvSpecFragment{}
	}
	return t.CustomDomain
}
func (t *AWSEnvSpecFragment) GetNodeGroups() []*AWSEnvSpecFragment_NodeGroups {
	if t == nil {
		t = &AWSEnvSpecFragment{}
	}
	return t.NodeGroups
}
func (t *AWSEnvSpecFragment) GetMaintenanceWindows() []*AWSEnvSpecFragment_MaintenanceWindows {
	if t == nil {
		t = &AWSEnvSpecFragment{}
	}
	return t.MaintenanceWindows
}
func (t *AWSEnvSpecFragment) GetRegion() string {
	if t == nil {
		t = &AWSEnvSpecFragment{}
	}
	return t.Region
}
func (t *AWSEnvSpecFragment) GetZones() []string {
	if t == nil {
		t = &AWSEnvSpecFragment{}
	}
	return t.Zones
}
func (t *AWSEnvSpecFragment) GetCidr() string {
	if t == nil {
		t = &AWSEnvSpecFragment{}
	}
	return t.Cidr
}
func (t *AWSEnvSpecFragment) GetAwsAccountID() string {
	if t == nil {
		t = &AWSEnvSpecFragment{}
	}
	return t.AwsAccountID
}
func (t *AWSEnvSpecFragment) GetPeeringConnections() []*AWSEnvSpecFragment_PeeringConnections {
	if t == nil {
		t = &AWSEnvSpecFragment{}
	}
	return t.PeeringConnections
}
func (t *AWSEnvSpecFragment) GetEndpoints() []*AWSEnvSpecFragment_Endpoints {
	if t == nil {
		t = &AWSEnvSpecFragment{}
	}
	return t.Endpoints
}
func (t *AWSEnvSpecFragment) GetTags() []*AWSEnvSpecFragment_Tags {
	if t == nil {
		t = &AWSEnvSpecFragment{}
	}
	return t.Tags
}
func (t *AWSEnvSpecFragment) GetCloudConnect() bool {
	if t == nil {
		t = &AWSEnvSpecFragment{}
	}
	return t.CloudConnect
}

type AzureEnvSpecFragment struct {
	LoadBalancers         AzureEnvSpecFragment_LoadBalancers         "json:\"loadBalancers\" graphql:\"loadBalancers\""
	LoadBalancingStrategy LoadBalancingStrategy                      "json:\"loadBalancingStrategy\" graphql:\"loadBalancingStrategy\""
	CustomDomain          *string                                    "json:\"customDomain,omitempty\" graphql:\"customDomain\""
	NodeGroups            []*AzureEnvSpecFragment_NodeGroups         "json:\"nodeGroups\" graphql:\"nodeGroups\""
	MaintenanceWindows    []*AzureEnvSpecFragment_MaintenanceWindows "json:\"maintenanceWindows\" graphql:\"maintenanceWindows\""
	Tags                  []*AzureEnvSpecFragment_Tags               "json:\"tags\" graphql:\"tags\""
	PrivateLinkService    AzureEnvSpecFragment_PrivateLinkService    "json:\"privateLinkService\" graphql:\"privateLinkService\""
	Region                string                                     "json:\"region\" graphql:\"region\""
	Zones                 []string                                   "json:\"zones\" graphql:\"zones\""
	Cidr                  string                                     "json:\"cidr\" graphql:\"cidr\""
	TenantID              string                                     "json:\"tenantID\" graphql:\"tenantID\""
	SubscriptionID        string                                     "json:\"subscriptionID\" graphql:\"subscriptionID\""
	CloudConnect          bool                                       "json:\"cloudConnect\" graphql:\"cloudConnect\""
}

func (t *AzureEnvSpecFragment) GetLoadBalancers() *AzureEnvSpecFragment_LoadBalancers {
	if t == nil {
		t = &AzureEnvSpecFragment{}
	}
	return &t.LoadBalancers
}
func (t *AzureEnvSpecFragment) GetLoadBalancingStrategy() *LoadBalancingStrategy {
	if t == nil {
		t = &AzureEnvSpecFragment{}
	}
	return &t.LoadBalancingStrategy
}
func (t *AzureEnvSpecFragment) GetCustomDomain() *string {
	if t == nil {
		t = &AzureEnvSpecFragment{}
	}
	return t.CustomDomain
}
func (t *AzureEnvSpecFragment) GetNodeGroups() []*AzureEnvSpecFragment_NodeGroups {
	if t == nil {
		t = &AzureEnvSpecFragment{}
	}
	return t.NodeGroups
}
func (t *AzureEnvSpecFragment) GetMaintenanceWindows() []*AzureEnvSpecFragment_MaintenanceWindows {
	if t == nil {
		t = &AzureEnvSpecFragment{}
	}
	return t.MaintenanceWindows
}
func (t *AzureEnvSpecFragment) GetTags() []*AzureEnvSpecFragment_Tags {
	if t == nil {
		t = &AzureEnvSpecFragment{}
	}
	return t.Tags
}
func (t *AzureEnvSpecFragment) GetPrivateLinkService() *AzureEnvSpecFragment_PrivateLinkService {
	if t == nil {
		t = &AzureEnvSpecFragment{}
	}
	return &t.PrivateLinkService
}
func (t *AzureEnvSpecFragment) GetRegion() string {
	if t == nil {
		t = &AzureEnvSpecFragment{}
	}
	return t.Region
}
func (t *AzureEnvSpecFragment) GetZones() []string {
	if t == nil {
		t = &AzureEnvSpecFragment{}
	}
	return t.Zones
}
func (t *AzureEnvSpecFragment) GetCidr() string {
	if t == nil {
		t = &AzureEnvSpecFragment{}
	}
	return t.Cidr
}
func (t *AzureEnvSpecFragment) GetTenantID() string {
	if t == nil {
		t = &AzureEnvSpecFragment{}
	}
	return t.TenantID
}
func (t *AzureEnvSpecFragment) GetSubscriptionID() string {
	if t == nil {
		t = &AzureEnvSpecFragment{}
	}
	return t.SubscriptionID
}
func (t *AzureEnvSpecFragment) GetCloudConnect() bool {
	if t == nil {
		t = &AzureEnvSpecFragment{}
	}
	return t.CloudConnect
}

type GCPEnvSpecFragment struct {
	LoadBalancers         GCPEnvSpecFragment_LoadBalancers         "json:\"loadBalancers\" graphql:\"loadBalancers\""
	LoadBalancingStrategy LoadBalancingStrategy                    "json:\"loadBalancingStrategy\" graphql:\"loadBalancingStrategy\""
	CustomDomain          *string                                  "json:\"customDomain,omitempty\" graphql:\"customDomain\""
	NodeGroups            []*GCPEnvSpecFragment_NodeGroups         "json:\"nodeGroups\" graphql:\"nodeGroups\""
	MaintenanceWindows    []*GCPEnvSpecFragment_MaintenanceWindows "json:\"maintenanceWindows\" graphql:\"maintenanceWindows\""
	Region                string                                   "json:\"region\" graphql:\"region\""
	Zones                 []string                                 "json:\"zones\" graphql:\"zones\""
	Cidr                  string                                   "json:\"cidr\" graphql:\"cidr\""
	GcpProjectID          string                                   "json:\"gcpProjectId\" graphql:\"gcpProjectId\""
	CloudConnect          bool                                     "json:\"cloudConnect\" graphql:\"cloudConnect\""
}

func (t *GCPEnvSpecFragment) GetLoadBalancers() *GCPEnvSpecFragment_LoadBalancers {
	if t == nil {
		t = &GCPEnvSpecFragment{}
	}
	return &t.LoadBalancers
}
func (t *GCPEnvSpecFragment) GetLoadBalancingStrategy() *LoadBalancingStrategy {
	if t == nil {
		t = &GCPEnvSpecFragment{}
	}
	return &t.LoadBalancingStrategy
}
func (t *GCPEnvSpecFragment) GetCustomDomain() *string {
	if t == nil {
		t = &GCPEnvSpecFragment{}
	}
	return t.CustomDomain
}
func (t *GCPEnvSpecFragment) GetNodeGroups() []*GCPEnvSpecFragment_NodeGroups {
	if t == nil {
		t = &GCPEnvSpecFragment{}
	}
	return t.NodeGroups
}
func (t *GCPEnvSpecFragment) GetMaintenanceWindows() []*GCPEnvSpecFragment_MaintenanceWindows {
	if t == nil {
		t = &GCPEnvSpecFragment{}
	}
	return t.MaintenanceWindows
}
func (t *GCPEnvSpecFragment) GetRegion() string {
	if t == nil {
		t = &GCPEnvSpecFragment{}
	}
	return t.Region
}
func (t *GCPEnvSpecFragment) GetZones() []string {
	if t == nil {
		t = &GCPEnvSpecFragment{}
	}
	return t.Zones
}
func (t *GCPEnvSpecFragment) GetCidr() string {
	if t == nil {
		t = &GCPEnvSpecFragment{}
	}
	return t.Cidr
}
func (t *GCPEnvSpecFragment) GetGcpProjectID() string {
	if t == nil {
		t = &GCPEnvSpecFragment{}
	}
	return t.GcpProjectID
}
func (t *GCPEnvSpecFragment) GetCloudConnect() bool {
	if t == nil {
		t = &GCPEnvSpecFragment{}
	}
	return t.CloudConnect
}

type HCloudEnvSpecFragment struct {
	LoadBalancers         HCloudEnvSpecFragment_LoadBalancers         "json:\"loadBalancers\" graphql:\"loadBalancers\""
	LoadBalancingStrategy LoadBalancingStrategy                       "json:\"loadBalancingStrategy\" graphql:\"loadBalancingStrategy\""
	CustomDomain          *string                                     "json:\"customDomain,omitempty\" graphql:\"customDomain\""
	NodeGroups            []*HCloudEnvSpecFragment_NodeGroups         "json:\"nodeGroups\" graphql:\"nodeGroups\""
	MaintenanceWindows    []*HCloudEnvSpecFragment_MaintenanceWindows "json:\"maintenanceWindows\" graphql:\"maintenanceWindows\""
	NetworkZone           string                                      "json:\"networkZone\" graphql:\"networkZone\""
	Locations             []string                                    "json:\"locations\" graphql:\"locations\""
	Cidr                  string                                      "json:\"cidr\" graphql:\"cidr\""
	CloudConnect          bool                                        "json:\"cloudConnect\" graphql:\"cloudConnect\""
	WireguardPeers        []*HCloudEnvSpecFragment_WireguardPeers     "json:\"wireguardPeers\" graphql:\"wireguardPeers\""
}

func (t *HCloudEnvSpecFragment) GetLoadBalancers() *HCloudEnvSpecFragment_LoadBalancers {
	if t == nil {
		t = &HCloudEnvSpecFragment{}
	}
	return &t.LoadBalancers
}
func (t *HCloudEnvSpecFragment) GetLoadBalancingStrategy() *LoadBalancingStrategy {
	if t == nil {
		t = &HCloudEnvSpecFragment{}
	}
	return &t.LoadBalancingStrategy
}
func (t *HCloudEnvSpecFragment) GetCustomDomain() *string {
	if t == nil {
		t = &HCloudEnvSpecFragment{}
	}
	return t.CustomDomain
}
func (t *HCloudEnvSpecFragment) GetNodeGroups() []*HCloudEnvSpecFragment_NodeGroups {
	if t == nil {
		t = &HCloudEnvSpecFragment{}
	}
	return t.NodeGroups
}
func (t *HCloudEnvSpecFragment) GetMaintenanceWindows() []*HCloudEnvSpecFragment_MaintenanceWindows {
	if t == nil {
		t = &HCloudEnvSpecFragment{}
	}
	return t.MaintenanceWindows
}
func (t *HCloudEnvSpecFragment) GetNetworkZone() string {
	if t == nil {
		t = &HCloudEnvSpecFragment{}
	}
	return t.NetworkZone
}
func (t *HCloudEnvSpecFragment) GetLocations() []string {
	if t == nil {
		t = &HCloudEnvSpecFragment{}
	}
	return t.Locations
}
func (t *HCloudEnvSpecFragment) GetCidr() string {
	if t == nil {
		t = &HCloudEnvSpecFragment{}
	}
	return t.Cidr
}
func (t *HCloudEnvSpecFragment) GetCloudConnect() bool {
	if t == nil {
		t = &HCloudEnvSpecFragment{}
	}
	return t.CloudConnect
}
func (t *HCloudEnvSpecFragment) GetWireguardPeers() []*HCloudEnvSpecFragment_WireguardPeers {
	if t == nil {
		t = &HCloudEnvSpecFragment{}
	}
	return t.WireguardPeers
}

type K8SEnvSpecFragment struct {
	LoadBalancers         K8SEnvSpecFragment_LoadBalancers         "json:\"loadBalancers\" graphql:\"loadBalancers\""
	LoadBalancingStrategy LoadBalancingStrategy                    "json:\"loadBalancingStrategy\" graphql:\"loadBalancingStrategy\""
	Distribution          K8SDistribution                          "json:\"distribution\" graphql:\"distribution\""
	CustomDomain          *string                                  "json:\"customDomain,omitempty\" graphql:\"customDomain\""
	NodeGroups            []*K8SEnvSpecFragment_NodeGroups         "json:\"nodeGroups\" graphql:\"nodeGroups\""
	CustomNodeTypes       []*K8SEnvSpecFragment_CustomNodeTypes    "json:\"customNodeTypes\" graphql:\"customNodeTypes\""
	MaintenanceWindows    []*K8SEnvSpecFragment_MaintenanceWindows "json:\"maintenanceWindows\" graphql:\"maintenanceWindows\""
	Metrics               K8SEnvSpecFragment_Metrics               "json:\"metrics\" graphql:\"metrics\""
	Logs                  K8SEnvSpecFragment_Logs                  "json:\"logs\" graphql:\"logs\""
}

func (t *K8SEnvSpecFragment) GetLoadBalancers() *K8SEnvSpecFragment_LoadBalancers {
	if t == nil {
		t = &K8SEnvSpecFragment{}
	}
	return &t.LoadBalancers
}
func (t *K8SEnvSpecFragment) GetLoadBalancingStrategy() *LoadBalancingStrategy {
	if t == nil {
		t = &K8SEnvSpecFragment{}
	}
	return &t.LoadBalancingStrategy
}
func (t *K8SEnvSpecFragment) GetDistribution() *K8SDistribution {
	if t == nil {
		t = &K8SEnvSpecFragment{}
	}
	return &t.Distribution
}
func (t *K8SEnvSpecFragment) GetCustomDomain() *string {
	if t == nil {
		t = &K8SEnvSpecFragment{}
	}
	return t.CustomDomain
}
func (t *K8SEnvSpecFragment) GetNodeGroups() []*K8SEnvSpecFragment_NodeGroups {
	if t == nil {
		t = &K8SEnvSpecFragment{}
	}
	return t.NodeGroups
}
func (t *K8SEnvSpecFragment) GetCustomNodeTypes() []*K8SEnvSpecFragment_CustomNodeTypes {
	if t == nil {
		t = &K8SEnvSpecFragment{}
	}
	return t.CustomNodeTypes
}
func (t *K8SEnvSpecFragment) GetMaintenanceWindows() []*K8SEnvSpecFragment_MaintenanceWindows {
	if t == nil {
		t = &K8SEnvSpecFragment{}
	}
	return t.MaintenanceWindows
}
func (t *K8SEnvSpecFragment) GetMetrics() *K8SEnvSpecFragment_Metrics {
	if t == nil {
		t = &K8SEnvSpecFragment{}
	}
	return &t.Metrics
}
func (t *K8SEnvSpecFragment) GetLogs() *K8SEnvSpecFragment_Logs {
	if t == nil {
		t = &K8SEnvSpecFragment{}
	}
	return &t.Logs
}

type AWSEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	CrossZone      bool     "json:\"crossZone\" graphql:\"crossZone\""
}

func (t *AWSEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &AWSEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *AWSEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &AWSEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}
func (t *AWSEnvSpecFragment_LoadBalancers_Public) GetCrossZone() bool {
	if t == nil {
		t = &AWSEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.CrossZone
}

type AWSEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled                          bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges                   []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	CrossZone                        bool     "json:\"crossZone\" graphql:\"crossZone\""
	EndpointServiceAllowedPrincipals []string "json:\"endpointServiceAllowedPrincipals\" graphql:\"endpointServiceAllowedPrincipals\""
}

func (t *AWSEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *AWSEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}
func (t *AWSEnvSpecFragment_LoadBalancers_Internal) GetCrossZone() bool {
	if t == nil {
		t = &AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.CrossZone
}
func (t *AWSEnvSpecFragment_LoadBalancers_Internal) GetEndpointServiceAllowedPrincipals() []string {
	if t == nil {
		t = &AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.EndpointServiceAllowedPrincipals
}

type AWSEnvSpecFragment_LoadBalancers struct {
	Public   AWSEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal AWSEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *AWSEnvSpecFragment_LoadBalancers) GetPublic() *AWSEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &AWSEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *AWSEnvSpecFragment_LoadBalancers) GetInternal() *AWSEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &AWSEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type AWSEnvSpecFragment_NodeGroups struct {
	Name            string            "json:\"name\" graphql:\"name\""
	NodeType        string            "json:\"nodeType\" graphql:\"nodeType\""
	Zones           []string          "json:\"zones\" graphql:\"zones\""
	CapacityPerZone int64             "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Reservations    []NodeReservation "json:\"reservations\" graphql:\"reservations\""
}

func (t *AWSEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &AWSEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *AWSEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &AWSEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *AWSEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &AWSEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}
func (t *AWSEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &AWSEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *AWSEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &AWSEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}

type AWSEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *AWSEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *AWSEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *AWSEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *AWSEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *AWSEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type AWSEnvSpecFragment_PeeringConnections struct {
	AwsAccountID *string "json:\"awsAccountID,omitempty\" graphql:\"awsAccountID\""
	VpcID        string  "json:\"vpcID\" graphql:\"vpcID\""
	VpcRegion    *string "json:\"vpcRegion,omitempty\" graphql:\"vpcRegion\""
}

func (t *AWSEnvSpecFragment_PeeringConnections) GetAwsAccountID() *string {
	if t == nil {
		t = &AWSEnvSpecFragment_PeeringConnections{}
	}
	return t.AwsAccountID
}
func (t *AWSEnvSpecFragment_PeeringConnections) GetVpcID() string {
	if t == nil {
		t = &AWSEnvSpecFragment_PeeringConnections{}
	}
	return t.VpcID
}
func (t *AWSEnvSpecFragment_PeeringConnections) GetVpcRegion() *string {
	if t == nil {
		t = &AWSEnvSpecFragment_PeeringConnections{}
	}
	return t.VpcRegion
}

type AWSEnvSpecFragment_Endpoints struct {
	ServiceName string  "json:\"serviceName\" graphql:\"serviceName\""
	Alias       *string "json:\"alias,omitempty\" graphql:\"alias\""
	PrivateDNS  bool    "json:\"privateDNS\" graphql:\"privateDNS\""
}

func (t *AWSEnvSpecFragment_Endpoints) GetServiceName() string {
	if t == nil {
		t = &AWSEnvSpecFragment_Endpoints{}
	}
	return t.ServiceName
}
func (t *AWSEnvSpecFragment_Endpoints) GetAlias() *string {
	if t == nil {
		t = &AWSEnvSpecFragment_Endpoints{}
	}
	return t.Alias
}
func (t *AWSEnvSpecFragment_Endpoints) GetPrivateDNS() bool {
	if t == nil {
		t = &AWSEnvSpecFragment_Endpoints{}
	}
	return t.PrivateDNS
}

type AWSEnvSpecFragment_Tags struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *AWSEnvSpecFragment_Tags) GetKey() string {
	if t == nil {
		t = &AWSEnvSpecFragment_Tags{}
	}
	return t.Key
}
func (t *AWSEnvSpecFragment_Tags) GetValue() string {
	if t == nil {
		t = &AWSEnvSpecFragment_Tags{}
	}
	return t.Value
}

type AzureEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *AzureEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &AzureEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *AzureEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &AzureEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}

type AzureEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *AzureEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &AzureEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *AzureEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &AzureEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}

type AzureEnvSpecFragment_LoadBalancers struct {
	Public   AzureEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal AzureEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *AzureEnvSpecFragment_LoadBalancers) GetPublic() *AzureEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &AzureEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *AzureEnvSpecFragment_LoadBalancers) GetInternal() *AzureEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &AzureEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type AzureEnvSpecFragment_NodeGroups struct {
	Name            string            "json:\"name\" graphql:\"name\""
	NodeType        string            "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerZone int64             "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Reservations    []NodeReservation "json:\"reservations\" graphql:\"reservations\""
	Zones           []string          "json:\"zones\" graphql:\"zones\""
}

func (t *AzureEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &AzureEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *AzureEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &AzureEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *AzureEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &AzureEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *AzureEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &AzureEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}
func (t *AzureEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &AzureEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}

type AzureEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *AzureEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *AzureEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *AzureEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *AzureEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *AzureEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type AzureEnvSpecFragment_Tags struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *AzureEnvSpecFragment_Tags) GetKey() string {
	if t == nil {
		t = &AzureEnvSpecFragment_Tags{}
	}
	return t.Key
}
func (t *AzureEnvSpecFragment_Tags) GetValue() string {
	if t == nil {
		t = &AzureEnvSpecFragment_Tags{}
	}
	return t.Value
}

type AzureEnvSpecFragment_PrivateLinkService struct {
	AllowedSubscriptions []string "json:\"allowedSubscriptions\" graphql:\"allowedSubscriptions\""
}

func (t *AzureEnvSpecFragment_PrivateLinkService) GetAllowedSubscriptions() []string {
	if t == nil {
		t = &AzureEnvSpecFragment_PrivateLinkService{}
	}
	return t.AllowedSubscriptions
}

type GCPEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *GCPEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &GCPEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *GCPEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &GCPEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}

type GCPEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *GCPEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &GCPEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *GCPEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &GCPEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}

type GCPEnvSpecFragment_LoadBalancers struct {
	Public   GCPEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal GCPEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *GCPEnvSpecFragment_LoadBalancers) GetPublic() *GCPEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &GCPEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *GCPEnvSpecFragment_LoadBalancers) GetInternal() *GCPEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &GCPEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type GCPEnvSpecFragment_NodeGroups struct {
	Name            string            "json:\"name\" graphql:\"name\""
	NodeType        string            "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerZone int64             "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Zones           []string          "json:\"zones\" graphql:\"zones\""
	Reservations    []NodeReservation "json:\"reservations\" graphql:\"reservations\""
}

func (t *GCPEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &GCPEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *GCPEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &GCPEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *GCPEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &GCPEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *GCPEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &GCPEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}
func (t *GCPEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &GCPEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}

type GCPEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *GCPEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *GCPEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *GCPEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *GCPEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *GCPEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type HCloudEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *HCloudEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &HCloudEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *HCloudEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &HCloudEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}

type HCloudEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *HCloudEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &HCloudEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *HCloudEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &HCloudEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}

type HCloudEnvSpecFragment_LoadBalancers struct {
	Public   HCloudEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal HCloudEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *HCloudEnvSpecFragment_LoadBalancers) GetPublic() *HCloudEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &HCloudEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *HCloudEnvSpecFragment_LoadBalancers) GetInternal() *HCloudEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &HCloudEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type HCloudEnvSpecFragment_NodeGroups struct {
	Name                string            "json:\"name\" graphql:\"name\""
	NodeType            string            "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerLocation int64             "json:\"capacityPerLocation\" graphql:\"capacityPerLocation\""
	Locations           []string          "json:\"locations\" graphql:\"locations\""
	Reservations        []NodeReservation "json:\"reservations\" graphql:\"reservations\""
}

func (t *HCloudEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *HCloudEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *HCloudEnvSpecFragment_NodeGroups) GetCapacityPerLocation() int64 {
	if t == nil {
		t = &HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerLocation
}
func (t *HCloudEnvSpecFragment_NodeGroups) GetLocations() []string {
	if t == nil {
		t = &HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.Locations
}
func (t *HCloudEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}

type HCloudEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *HCloudEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *HCloudEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *HCloudEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *HCloudEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *HCloudEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type HCloudEnvSpecFragment_WireguardPeers struct {
	PublicKey  string   "json:\"publicKey\" graphql:\"publicKey\""
	AllowedIPs []string "json:\"allowedIPs\" graphql:\"allowedIPs\""
	Endpoint   string   "json:\"endpoint\" graphql:\"endpoint\""
}

func (t *HCloudEnvSpecFragment_WireguardPeers) GetPublicKey() string {
	if t == nil {
		t = &HCloudEnvSpecFragment_WireguardPeers{}
	}
	return t.PublicKey
}
func (t *HCloudEnvSpecFragment_WireguardPeers) GetAllowedIPs() []string {
	if t == nil {
		t = &HCloudEnvSpecFragment_WireguardPeers{}
	}
	return t.AllowedIPs
}
func (t *HCloudEnvSpecFragment_WireguardPeers) GetEndpoint() string {
	if t == nil {
		t = &HCloudEnvSpecFragment_WireguardPeers{}
	}
	return t.Endpoint
}

type K8SEnvSpecFragment_LoadBalancers_Public_Annotations struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *K8SEnvSpecFragment_LoadBalancers_Public_Annotations) GetKey() string {
	if t == nil {
		t = &K8SEnvSpecFragment_LoadBalancers_Public_Annotations{}
	}
	return t.Key
}
func (t *K8SEnvSpecFragment_LoadBalancers_Public_Annotations) GetValue() string {
	if t == nil {
		t = &K8SEnvSpecFragment_LoadBalancers_Public_Annotations{}
	}
	return t.Value
}

type K8SEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool                                                   "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string                                               "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	Annotations    []*K8SEnvSpecFragment_LoadBalancers_Public_Annotations "json:\"annotations\" graphql:\"annotations\""
}

func (t *K8SEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &K8SEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *K8SEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &K8SEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}
func (t *K8SEnvSpecFragment_LoadBalancers_Public) GetAnnotations() []*K8SEnvSpecFragment_LoadBalancers_Public_Annotations {
	if t == nil {
		t = &K8SEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Annotations
}

type K8SEnvSpecFragment_LoadBalancers_Internal_Annotations struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *K8SEnvSpecFragment_LoadBalancers_Internal_Annotations) GetKey() string {
	if t == nil {
		t = &K8SEnvSpecFragment_LoadBalancers_Internal_Annotations{}
	}
	return t.Key
}
func (t *K8SEnvSpecFragment_LoadBalancers_Internal_Annotations) GetValue() string {
	if t == nil {
		t = &K8SEnvSpecFragment_LoadBalancers_Internal_Annotations{}
	}
	return t.Value
}

type K8SEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool                                                     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string                                                 "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	Annotations    []*K8SEnvSpecFragment_LoadBalancers_Internal_Annotations "json:\"annotations\" graphql:\"annotations\""
}

func (t *K8SEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &K8SEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *K8SEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &K8SEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}
func (t *K8SEnvSpecFragment_LoadBalancers_Internal) GetAnnotations() []*K8SEnvSpecFragment_LoadBalancers_Internal_Annotations {
	if t == nil {
		t = &K8SEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Annotations
}

type K8SEnvSpecFragment_LoadBalancers struct {
	Public   K8SEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal K8SEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *K8SEnvSpecFragment_LoadBalancers) GetPublic() *K8SEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &K8SEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *K8SEnvSpecFragment_LoadBalancers) GetInternal() *K8SEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &K8SEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type K8SEnvSpecFragment_NodeGroups_Selector struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *K8SEnvSpecFragment_NodeGroups_Selector) GetKey() string {
	if t == nil {
		t = &K8SEnvSpecFragment_NodeGroups_Selector{}
	}
	return t.Key
}
func (t *K8SEnvSpecFragment_NodeGroups_Selector) GetValue() string {
	if t == nil {
		t = &K8SEnvSpecFragment_NodeGroups_Selector{}
	}
	return t.Value
}

type K8SEnvSpecFragment_NodeGroups_Tolerations struct {
	Effect   NodeTolerationEffect   "json:\"effect\" graphql:\"effect\""
	Operator NodeTolerationOperator "json:\"operator\" graphql:\"operator\""
	Key      string                 "json:\"key\" graphql:\"key\""
	Value    string                 "json:\"value\" graphql:\"value\""
}

func (t *K8SEnvSpecFragment_NodeGroups_Tolerations) GetEffect() *NodeTolerationEffect {
	if t == nil {
		t = &K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return &t.Effect
}
func (t *K8SEnvSpecFragment_NodeGroups_Tolerations) GetOperator() *NodeTolerationOperator {
	if t == nil {
		t = &K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return &t.Operator
}
func (t *K8SEnvSpecFragment_NodeGroups_Tolerations) GetKey() string {
	if t == nil {
		t = &K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return t.Key
}
func (t *K8SEnvSpecFragment_NodeGroups_Tolerations) GetValue() string {
	if t == nil {
		t = &K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return t.Value
}

type K8SEnvSpecFragment_NodeGroups struct {
	Name            string                                       "json:\"name\" graphql:\"name\""
	NodeType        string                                       "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerZone int64                                        "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Selector        []*K8SEnvSpecFragment_NodeGroups_Selector    "json:\"selector\" graphql:\"selector\""
	Tolerations     []*K8SEnvSpecFragment_NodeGroups_Tolerations "json:\"tolerations\" graphql:\"tolerations\""
	Reservations    []NodeReservation                            "json:\"reservations\" graphql:\"reservations\""
	Zones           []string                                     "json:\"zones\" graphql:\"zones\""
}

func (t *K8SEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *K8SEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &K8SEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *K8SEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &K8SEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *K8SEnvSpecFragment_NodeGroups) GetSelector() []*K8SEnvSpecFragment_NodeGroups_Selector {
	if t == nil {
		t = &K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Selector
}
func (t *K8SEnvSpecFragment_NodeGroups) GetTolerations() []*K8SEnvSpecFragment_NodeGroups_Tolerations {
	if t == nil {
		t = &K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Tolerations
}
func (t *K8SEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}
func (t *K8SEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}

type K8SEnvSpecFragment_CustomNodeTypes struct {
	Name                  string  "json:\"name\" graphql:\"name\""
	CPUAllocatable        float64 "json:\"cpuAllocatable\" graphql:\"cpuAllocatable\""
	MemAllocatableInBytes int64   "json:\"memAllocatableInBytes\" graphql:\"memAllocatableInBytes\""
}

func (t *K8SEnvSpecFragment_CustomNodeTypes) GetName() string {
	if t == nil {
		t = &K8SEnvSpecFragment_CustomNodeTypes{}
	}
	return t.Name
}
func (t *K8SEnvSpecFragment_CustomNodeTypes) GetCPUAllocatable() float64 {
	if t == nil {
		t = &K8SEnvSpecFragment_CustomNodeTypes{}
	}
	return t.CPUAllocatable
}
func (t *K8SEnvSpecFragment_CustomNodeTypes) GetMemAllocatableInBytes() int64 {
	if t == nil {
		t = &K8SEnvSpecFragment_CustomNodeTypes{}
	}
	return t.MemAllocatableInBytes
}

type K8SEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *K8SEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *K8SEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *K8SEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *K8SEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *K8SEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type K8SEnvSpecFragment_Metrics struct {
	RetentionPeriodInDays *int64 "json:\"retentionPeriodInDays,omitempty\" graphql:\"retentionPeriodInDays\""
}

func (t *K8SEnvSpecFragment_Metrics) GetRetentionPeriodInDays() *int64 {
	if t == nil {
		t = &K8SEnvSpecFragment_Metrics{}
	}
	return t.RetentionPeriodInDays
}

type K8SEnvSpecFragment_Logs_Storage_S3 struct {
	BucketName *string "json:\"bucketName,omitempty\" graphql:\"bucketName\""
	Region     *string "json:\"region,omitempty\" graphql:\"region\""
}

func (t *K8SEnvSpecFragment_Logs_Storage_S3) GetBucketName() *string {
	if t == nil {
		t = &K8SEnvSpecFragment_Logs_Storage_S3{}
	}
	return t.BucketName
}
func (t *K8SEnvSpecFragment_Logs_Storage_S3) GetRegion() *string {
	if t == nil {
		t = &K8SEnvSpecFragment_Logs_Storage_S3{}
	}
	return t.Region
}

type K8SEnvSpecFragment_Logs_Storage_Gcs struct {
	BucketName *string "json:\"bucketName,omitempty\" graphql:\"bucketName\""
}

func (t *K8SEnvSpecFragment_Logs_Storage_Gcs) GetBucketName() *string {
	if t == nil {
		t = &K8SEnvSpecFragment_Logs_Storage_Gcs{}
	}
	return t.BucketName
}

type K8SEnvSpecFragment_Logs_Storage struct {
	S3  *K8SEnvSpecFragment_Logs_Storage_S3  "json:\"s3,omitempty\" graphql:\"s3\""
	Gcs *K8SEnvSpecFragment_Logs_Storage_Gcs "json:\"gcs,omitempty\" graphql:\"gcs\""
}

func (t *K8SEnvSpecFragment_Logs_Storage) GetS3() *K8SEnvSpecFragment_Logs_Storage_S3 {
	if t == nil {
		t = &K8SEnvSpecFragment_Logs_Storage{}
	}
	return t.S3
}
func (t *K8SEnvSpecFragment_Logs_Storage) GetGcs() *K8SEnvSpecFragment_Logs_Storage_Gcs {
	if t == nil {
		t = &K8SEnvSpecFragment_Logs_Storage{}
	}
	return t.Gcs
}

type K8SEnvSpecFragment_Logs struct {
	Storage K8SEnvSpecFragment_Logs_Storage "json:\"storage\" graphql:\"storage\""
}

func (t *K8SEnvSpecFragment_Logs) GetStorage() *K8SEnvSpecFragment_Logs_Storage {
	if t == nil {
		t = &K8SEnvSpecFragment_Logs{}
	}
	return &t.Storage
}

type GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	CrossZone      bool     "json:\"crossZone\" graphql:\"crossZone\""
}

func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public) GetCrossZone() bool {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.CrossZone
}

type GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled                          bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges                   []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	CrossZone                        bool     "json:\"crossZone\" graphql:\"crossZone\""
	EndpointServiceAllowedPrincipals []string "json:\"endpointServiceAllowedPrincipals\" graphql:\"endpointServiceAllowedPrincipals\""
}

func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal) GetCrossZone() bool {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.CrossZone
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal) GetEndpointServiceAllowedPrincipals() []string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.EndpointServiceAllowedPrincipals
}

type GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers struct {
	Public   GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers) GetPublic() *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers) GetInternal() *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_NodeGroups struct {
	Name            string            "json:\"name\" graphql:\"name\""
	NodeType        string            "json:\"nodeType\" graphql:\"nodeType\""
	Zones           []string          "json:\"zones\" graphql:\"zones\""
	CapacityPerZone int64             "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Reservations    []NodeReservation "json:\"reservations\" graphql:\"reservations\""
}

func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}

type GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_PeeringConnections struct {
	AwsAccountID *string "json:\"awsAccountID,omitempty\" graphql:\"awsAccountID\""
	VpcID        string  "json:\"vpcID\" graphql:\"vpcID\""
	VpcRegion    *string "json:\"vpcRegion,omitempty\" graphql:\"vpcRegion\""
}

func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_PeeringConnections) GetAwsAccountID() *string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_PeeringConnections{}
	}
	return t.AwsAccountID
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_PeeringConnections) GetVpcID() string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_PeeringConnections{}
	}
	return t.VpcID
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_PeeringConnections) GetVpcRegion() *string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_PeeringConnections{}
	}
	return t.VpcRegion
}

type GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_Endpoints struct {
	ServiceName string  "json:\"serviceName\" graphql:\"serviceName\""
	Alias       *string "json:\"alias,omitempty\" graphql:\"alias\""
	PrivateDNS  bool    "json:\"privateDNS\" graphql:\"privateDNS\""
}

func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_Endpoints) GetServiceName() string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_Endpoints{}
	}
	return t.ServiceName
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_Endpoints) GetAlias() *string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_Endpoints{}
	}
	return t.Alias
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_Endpoints) GetPrivateDNS() bool {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_Endpoints{}
	}
	return t.PrivateDNS
}

type GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_Tags struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_Tags) GetKey() string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_Tags{}
	}
	return t.Key
}
func (t *GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_Tags) GetValue() string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv_Spec_AWSEnvSpecFragment_Tags{}
	}
	return t.Value
}

type GetAWSEnv_AwsEnv struct {
	Name         string              "json:\"name\" graphql:\"name\""
	Spec         *AWSEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64               "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *GetAWSEnv_AwsEnv) GetName() string {
	if t == nil {
		t = &GetAWSEnv_AwsEnv{}
	}
	return t.Name
}
func (t *GetAWSEnv_AwsEnv) GetSpec() *AWSEnvSpecFragment {
	if t == nil {
		t = &GetAWSEnv_AwsEnv{}
	}
	return t.Spec
}
func (t *GetAWSEnv_AwsEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &GetAWSEnv_AwsEnv{}
	}
	return t.SpecRevision
}

type GetAWSEnvStatus_AwsEnv_Status_LoadBalancers_Internal struct {
	EndpointServiceName *string "json:\"endpointServiceName,omitempty\" graphql:\"endpointServiceName\""
}

func (t *GetAWSEnvStatus_AwsEnv_Status_LoadBalancers_Internal) GetEndpointServiceName() *string {
	if t == nil {
		t = &GetAWSEnvStatus_AwsEnv_Status_LoadBalancers_Internal{}
	}
	return t.EndpointServiceName
}

type GetAWSEnvStatus_AwsEnv_Status_LoadBalancers struct {
	Internal GetAWSEnvStatus_AwsEnv_Status_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *GetAWSEnvStatus_AwsEnv_Status_LoadBalancers) GetInternal() *GetAWSEnvStatus_AwsEnv_Status_LoadBalancers_Internal {
	if t == nil {
		t = &GetAWSEnvStatus_AwsEnv_Status_LoadBalancers{}
	}
	return &t.Internal
}

type GetAWSEnvStatus_AwsEnv_Status_PeeringConnections struct {
	ID    *string "json:\"id,omitempty\" graphql:\"id\""
	VpcID string  "json:\"vpcID\" graphql:\"vpcID\""
}

func (t *GetAWSEnvStatus_AwsEnv_Status_PeeringConnections) GetID() *string {
	if t == nil {
		t = &GetAWSEnvStatus_AwsEnv_Status_PeeringConnections{}
	}
	return t.ID
}
func (t *GetAWSEnvStatus_AwsEnv_Status_PeeringConnections) GetVpcID() string {
	if t == nil {
		t = &GetAWSEnvStatus_AwsEnv_Status_PeeringConnections{}
	}
	return t.VpcID
}

type GetAWSEnvStatus_AwsEnv_Status_Errors struct {
	Code    EnvStatusErrorCode "json:\"code\" graphql:\"code\""
	Message string             "json:\"message\" graphql:\"message\""
}

func (t *GetAWSEnvStatus_AwsEnv_Status_Errors) GetCode() *EnvStatusErrorCode {
	if t == nil {
		t = &GetAWSEnvStatus_AwsEnv_Status_Errors{}
	}
	return &t.Code
}
func (t *GetAWSEnvStatus_AwsEnv_Status_Errors) GetMessage() string {
	if t == nil {
		t = &GetAWSEnvStatus_AwsEnv_Status_Errors{}
	}
	return t.Message
}

type GetAWSEnvStatus_AwsEnv_Status struct {
	AppliedSpecRevision int64                                               "json:\"appliedSpecRevision\" graphql:\"appliedSpecRevision\""
	PendingDelete       bool                                                "json:\"pendingDelete\" graphql:\"pendingDelete\""
	LoadBalancers       GetAWSEnvStatus_AwsEnv_Status_LoadBalancers         "json:\"loadBalancers\" graphql:\"loadBalancers\""
	PeeringConnections  []*GetAWSEnvStatus_AwsEnv_Status_PeeringConnections "json:\"peeringConnections\" graphql:\"peeringConnections\""
	Errors              []*GetAWSEnvStatus_AwsEnv_Status_Errors             "json:\"errors\" graphql:\"errors\""
}

func (t *GetAWSEnvStatus_AwsEnv_Status) GetAppliedSpecRevision() int64 {
	if t == nil {
		t = &GetAWSEnvStatus_AwsEnv_Status{}
	}
	return t.AppliedSpecRevision
}
func (t *GetAWSEnvStatus_AwsEnv_Status) GetPendingDelete() bool {
	if t == nil {
		t = &GetAWSEnvStatus_AwsEnv_Status{}
	}
	return t.PendingDelete
}
func (t *GetAWSEnvStatus_AwsEnv_Status) GetLoadBalancers() *GetAWSEnvStatus_AwsEnv_Status_LoadBalancers {
	if t == nil {
		t = &GetAWSEnvStatus_AwsEnv_Status{}
	}
	return &t.LoadBalancers
}
func (t *GetAWSEnvStatus_AwsEnv_Status) GetPeeringConnections() []*GetAWSEnvStatus_AwsEnv_Status_PeeringConnections {
	if t == nil {
		t = &GetAWSEnvStatus_AwsEnv_Status{}
	}
	return t.PeeringConnections
}
func (t *GetAWSEnvStatus_AwsEnv_Status) GetErrors() []*GetAWSEnvStatus_AwsEnv_Status_Errors {
	if t == nil {
		t = &GetAWSEnvStatus_AwsEnv_Status{}
	}
	return t.Errors
}

type GetAWSEnvStatus_AwsEnv struct {
	Name         string                        "json:\"name\" graphql:\"name\""
	SpecRevision int64                         "json:\"specRevision\" graphql:\"specRevision\""
	Status       GetAWSEnvStatus_AwsEnv_Status "json:\"status\" graphql:\"status\""
}

func (t *GetAWSEnvStatus_AwsEnv) GetName() string {
	if t == nil {
		t = &GetAWSEnvStatus_AwsEnv{}
	}
	return t.Name
}
func (t *GetAWSEnvStatus_AwsEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &GetAWSEnvStatus_AwsEnv{}
	}
	return t.SpecRevision
}
func (t *GetAWSEnvStatus_AwsEnv) GetStatus() *GetAWSEnvStatus_AwsEnv_Status {
	if t == nil {
		t = &GetAWSEnvStatus_AwsEnv{}
	}
	return &t.Status
}

type CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	CrossZone      bool     "json:\"crossZone\" graphql:\"crossZone\""
}

func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public) GetCrossZone() bool {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.CrossZone
}

type CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled                          bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges                   []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	CrossZone                        bool     "json:\"crossZone\" graphql:\"crossZone\""
	EndpointServiceAllowedPrincipals []string "json:\"endpointServiceAllowedPrincipals\" graphql:\"endpointServiceAllowedPrincipals\""
}

func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal) GetCrossZone() bool {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.CrossZone
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal) GetEndpointServiceAllowedPrincipals() []string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.EndpointServiceAllowedPrincipals
}

type CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers struct {
	Public   CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers) GetPublic() *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers) GetInternal() *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups struct {
	Name            string            "json:\"name\" graphql:\"name\""
	NodeType        string            "json:\"nodeType\" graphql:\"nodeType\""
	Zones           []string          "json:\"zones\" graphql:\"zones\""
	CapacityPerZone int64             "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Reservations    []NodeReservation "json:\"reservations\" graphql:\"reservations\""
}

func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}

type CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_PeeringConnections struct {
	AwsAccountID *string "json:\"awsAccountID,omitempty\" graphql:\"awsAccountID\""
	VpcID        string  "json:\"vpcID\" graphql:\"vpcID\""
	VpcRegion    *string "json:\"vpcRegion,omitempty\" graphql:\"vpcRegion\""
}

func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_PeeringConnections) GetAwsAccountID() *string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_PeeringConnections{}
	}
	return t.AwsAccountID
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_PeeringConnections) GetVpcID() string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_PeeringConnections{}
	}
	return t.VpcID
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_PeeringConnections) GetVpcRegion() *string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_PeeringConnections{}
	}
	return t.VpcRegion
}

type CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_Endpoints struct {
	ServiceName string  "json:\"serviceName\" graphql:\"serviceName\""
	Alias       *string "json:\"alias,omitempty\" graphql:\"alias\""
	PrivateDNS  bool    "json:\"privateDNS\" graphql:\"privateDNS\""
}

func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_Endpoints) GetServiceName() string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_Endpoints{}
	}
	return t.ServiceName
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_Endpoints) GetAlias() *string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_Endpoints{}
	}
	return t.Alias
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_Endpoints) GetPrivateDNS() bool {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_Endpoints{}
	}
	return t.PrivateDNS
}

type CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_Tags struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_Tags) GetKey() string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_Tags{}
	}
	return t.Key
}
func (t *CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_Tags) GetValue() string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv_Spec_AWSEnvSpecFragment_Tags{}
	}
	return t.Value
}

type CreateAWSEnv_CreateAWSEnv struct {
	MutationID   string              "json:\"mutationId\" graphql:\"mutationId\""
	Spec         *AWSEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64               "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *CreateAWSEnv_CreateAWSEnv) GetMutationID() string {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv{}
	}
	return t.MutationID
}
func (t *CreateAWSEnv_CreateAWSEnv) GetSpec() *AWSEnvSpecFragment {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv{}
	}
	return t.Spec
}
func (t *CreateAWSEnv_CreateAWSEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &CreateAWSEnv_CreateAWSEnv{}
	}
	return t.SpecRevision
}

type UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	CrossZone      bool     "json:\"crossZone\" graphql:\"crossZone\""
}

func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public) GetCrossZone() bool {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.CrossZone
}

type UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled                          bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges                   []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	CrossZone                        bool     "json:\"crossZone\" graphql:\"crossZone\""
	EndpointServiceAllowedPrincipals []string "json:\"endpointServiceAllowedPrincipals\" graphql:\"endpointServiceAllowedPrincipals\""
}

func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal) GetCrossZone() bool {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.CrossZone
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal) GetEndpointServiceAllowedPrincipals() []string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.EndpointServiceAllowedPrincipals
}

type UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers struct {
	Public   UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers) GetPublic() *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers) GetInternal() *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups struct {
	Name            string            "json:\"name\" graphql:\"name\""
	NodeType        string            "json:\"nodeType\" graphql:\"nodeType\""
	Zones           []string          "json:\"zones\" graphql:\"zones\""
	CapacityPerZone int64             "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Reservations    []NodeReservation "json:\"reservations\" graphql:\"reservations\""
}

func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}

type UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_PeeringConnections struct {
	AwsAccountID *string "json:\"awsAccountID,omitempty\" graphql:\"awsAccountID\""
	VpcID        string  "json:\"vpcID\" graphql:\"vpcID\""
	VpcRegion    *string "json:\"vpcRegion,omitempty\" graphql:\"vpcRegion\""
}

func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_PeeringConnections) GetAwsAccountID() *string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_PeeringConnections{}
	}
	return t.AwsAccountID
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_PeeringConnections) GetVpcID() string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_PeeringConnections{}
	}
	return t.VpcID
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_PeeringConnections) GetVpcRegion() *string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_PeeringConnections{}
	}
	return t.VpcRegion
}

type UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_Endpoints struct {
	ServiceName string  "json:\"serviceName\" graphql:\"serviceName\""
	Alias       *string "json:\"alias,omitempty\" graphql:\"alias\""
	PrivateDNS  bool    "json:\"privateDNS\" graphql:\"privateDNS\""
}

func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_Endpoints) GetServiceName() string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_Endpoints{}
	}
	return t.ServiceName
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_Endpoints) GetAlias() *string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_Endpoints{}
	}
	return t.Alias
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_Endpoints) GetPrivateDNS() bool {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_Endpoints{}
	}
	return t.PrivateDNS
}

type UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_Tags struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_Tags) GetKey() string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_Tags{}
	}
	return t.Key
}
func (t *UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_Tags) GetValue() string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv_Spec_AWSEnvSpecFragment_Tags{}
	}
	return t.Value
}

type UpdateAWSEnv_UpdateAWSEnv struct {
	MutationID   string              "json:\"mutationId\" graphql:\"mutationId\""
	Spec         *AWSEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64               "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *UpdateAWSEnv_UpdateAWSEnv) GetMutationID() string {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv{}
	}
	return t.MutationID
}
func (t *UpdateAWSEnv_UpdateAWSEnv) GetSpec() *AWSEnvSpecFragment {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv{}
	}
	return t.Spec
}
func (t *UpdateAWSEnv_UpdateAWSEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &UpdateAWSEnv_UpdateAWSEnv{}
	}
	return t.SpecRevision
}

type DeleteAWSEnv_DeleteAWSEnv struct {
	MutationID string "json:\"mutationId\" graphql:\"mutationId\""
	PendingMfa bool   "json:\"pendingMFA\" graphql:\"pendingMFA\""
}

func (t *DeleteAWSEnv_DeleteAWSEnv) GetMutationID() string {
	if t == nil {
		t = &DeleteAWSEnv_DeleteAWSEnv{}
	}
	return t.MutationID
}
func (t *DeleteAWSEnv_DeleteAWSEnv) GetPendingMfa() bool {
	if t == nil {
		t = &DeleteAWSEnv_DeleteAWSEnv{}
	}
	return t.PendingMfa
}

type GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}

type GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}

type GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers struct {
	Public   GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers) GetPublic() *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers) GetInternal() *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_NodeGroups struct {
	Name            string            "json:\"name\" graphql:\"name\""
	NodeType        string            "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerZone int64             "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Reservations    []NodeReservation "json:\"reservations\" graphql:\"reservations\""
	Zones           []string          "json:\"zones\" graphql:\"zones\""
}

func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}
func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}

type GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_Tags struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_Tags) GetKey() string {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_Tags{}
	}
	return t.Key
}
func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_Tags) GetValue() string {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_Tags{}
	}
	return t.Value
}

type GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_PrivateLinkService struct {
	AllowedSubscriptions []string "json:\"allowedSubscriptions\" graphql:\"allowedSubscriptions\""
}

func (t *GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_PrivateLinkService) GetAllowedSubscriptions() []string {
	if t == nil {
		t = &GetAzureEnv_AzureEnv_Spec_AzureEnvSpecFragment_PrivateLinkService{}
	}
	return t.AllowedSubscriptions
}

type GetAzureEnv_AzureEnv struct {
	Name         string                "json:\"name\" graphql:\"name\""
	Spec         *AzureEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64                 "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *GetAzureEnv_AzureEnv) GetName() string {
	if t == nil {
		t = &GetAzureEnv_AzureEnv{}
	}
	return t.Name
}
func (t *GetAzureEnv_AzureEnv) GetSpec() *AzureEnvSpecFragment {
	if t == nil {
		t = &GetAzureEnv_AzureEnv{}
	}
	return t.Spec
}
func (t *GetAzureEnv_AzureEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &GetAzureEnv_AzureEnv{}
	}
	return t.SpecRevision
}

type GetAzureEnvStatus_AzureEnv_Status_LoadBalancers_Internal struct {
	PrivateLinkServiceAlias *string "json:\"privateLinkServiceAlias,omitempty\" graphql:\"privateLinkServiceAlias\""
}

func (t *GetAzureEnvStatus_AzureEnv_Status_LoadBalancers_Internal) GetPrivateLinkServiceAlias() *string {
	if t == nil {
		t = &GetAzureEnvStatus_AzureEnv_Status_LoadBalancers_Internal{}
	}
	return t.PrivateLinkServiceAlias
}

type GetAzureEnvStatus_AzureEnv_Status_LoadBalancers struct {
	Internal GetAzureEnvStatus_AzureEnv_Status_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *GetAzureEnvStatus_AzureEnv_Status_LoadBalancers) GetInternal() *GetAzureEnvStatus_AzureEnv_Status_LoadBalancers_Internal {
	if t == nil {
		t = &GetAzureEnvStatus_AzureEnv_Status_LoadBalancers{}
	}
	return &t.Internal
}

type GetAzureEnvStatus_AzureEnv_Status_Errors struct {
	Code    EnvStatusErrorCode "json:\"code\" graphql:\"code\""
	Message string             "json:\"message\" graphql:\"message\""
}

func (t *GetAzureEnvStatus_AzureEnv_Status_Errors) GetCode() *EnvStatusErrorCode {
	if t == nil {
		t = &GetAzureEnvStatus_AzureEnv_Status_Errors{}
	}
	return &t.Code
}
func (t *GetAzureEnvStatus_AzureEnv_Status_Errors) GetMessage() string {
	if t == nil {
		t = &GetAzureEnvStatus_AzureEnv_Status_Errors{}
	}
	return t.Message
}

type GetAzureEnvStatus_AzureEnv_Status struct {
	AppliedSpecRevision int64                                           "json:\"appliedSpecRevision\" graphql:\"appliedSpecRevision\""
	PendingDelete       bool                                            "json:\"pendingDelete\" graphql:\"pendingDelete\""
	LoadBalancers       GetAzureEnvStatus_AzureEnv_Status_LoadBalancers "json:\"loadBalancers\" graphql:\"loadBalancers\""
	Errors              []*GetAzureEnvStatus_AzureEnv_Status_Errors     "json:\"errors\" graphql:\"errors\""
}

func (t *GetAzureEnvStatus_AzureEnv_Status) GetAppliedSpecRevision() int64 {
	if t == nil {
		t = &GetAzureEnvStatus_AzureEnv_Status{}
	}
	return t.AppliedSpecRevision
}
func (t *GetAzureEnvStatus_AzureEnv_Status) GetPendingDelete() bool {
	if t == nil {
		t = &GetAzureEnvStatus_AzureEnv_Status{}
	}
	return t.PendingDelete
}
func (t *GetAzureEnvStatus_AzureEnv_Status) GetLoadBalancers() *GetAzureEnvStatus_AzureEnv_Status_LoadBalancers {
	if t == nil {
		t = &GetAzureEnvStatus_AzureEnv_Status{}
	}
	return &t.LoadBalancers
}
func (t *GetAzureEnvStatus_AzureEnv_Status) GetErrors() []*GetAzureEnvStatus_AzureEnv_Status_Errors {
	if t == nil {
		t = &GetAzureEnvStatus_AzureEnv_Status{}
	}
	return t.Errors
}

type GetAzureEnvStatus_AzureEnv struct {
	Name         string                            "json:\"name\" graphql:\"name\""
	SpecRevision int64                             "json:\"specRevision\" graphql:\"specRevision\""
	Status       GetAzureEnvStatus_AzureEnv_Status "json:\"status\" graphql:\"status\""
}

func (t *GetAzureEnvStatus_AzureEnv) GetName() string {
	if t == nil {
		t = &GetAzureEnvStatus_AzureEnv{}
	}
	return t.Name
}
func (t *GetAzureEnvStatus_AzureEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &GetAzureEnvStatus_AzureEnv{}
	}
	return t.SpecRevision
}
func (t *GetAzureEnvStatus_AzureEnv) GetStatus() *GetAzureEnvStatus_AzureEnv_Status {
	if t == nil {
		t = &GetAzureEnvStatus_AzureEnv{}
	}
	return &t.Status
}

type CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}

type CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}

type CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers struct {
	Public   CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers) GetPublic() *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers) GetInternal() *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups struct {
	Name            string            "json:\"name\" graphql:\"name\""
	NodeType        string            "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerZone int64             "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Reservations    []NodeReservation "json:\"reservations\" graphql:\"reservations\""
	Zones           []string          "json:\"zones\" graphql:\"zones\""
}

func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}
func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}

type CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_Tags struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_Tags) GetKey() string {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_Tags{}
	}
	return t.Key
}
func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_Tags) GetValue() string {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_Tags{}
	}
	return t.Value
}

type CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_PrivateLinkService struct {
	AllowedSubscriptions []string "json:\"allowedSubscriptions\" graphql:\"allowedSubscriptions\""
}

func (t *CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_PrivateLinkService) GetAllowedSubscriptions() []string {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv_Spec_AzureEnvSpecFragment_PrivateLinkService{}
	}
	return t.AllowedSubscriptions
}

type CreateAzureEnv_CreateAzureEnv struct {
	MutationID   string                "json:\"mutationId\" graphql:\"mutationId\""
	Spec         *AzureEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64                 "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *CreateAzureEnv_CreateAzureEnv) GetMutationID() string {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv{}
	}
	return t.MutationID
}
func (t *CreateAzureEnv_CreateAzureEnv) GetSpec() *AzureEnvSpecFragment {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv{}
	}
	return t.Spec
}
func (t *CreateAzureEnv_CreateAzureEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &CreateAzureEnv_CreateAzureEnv{}
	}
	return t.SpecRevision
}

type UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}

type UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}

type UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers struct {
	Public   UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers) GetPublic() *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers) GetInternal() *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups struct {
	Name            string            "json:\"name\" graphql:\"name\""
	NodeType        string            "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerZone int64             "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Reservations    []NodeReservation "json:\"reservations\" graphql:\"reservations\""
	Zones           []string          "json:\"zones\" graphql:\"zones\""
}

func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}
func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}

type UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_Tags struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_Tags) GetKey() string {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_Tags{}
	}
	return t.Key
}
func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_Tags) GetValue() string {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_Tags{}
	}
	return t.Value
}

type UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_PrivateLinkService struct {
	AllowedSubscriptions []string "json:\"allowedSubscriptions\" graphql:\"allowedSubscriptions\""
}

func (t *UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_PrivateLinkService) GetAllowedSubscriptions() []string {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv_Spec_AzureEnvSpecFragment_PrivateLinkService{}
	}
	return t.AllowedSubscriptions
}

type UpdateAzureEnv_UpdateAzureEnv struct {
	MutationID   string                "json:\"mutationId\" graphql:\"mutationId\""
	Spec         *AzureEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64                 "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *UpdateAzureEnv_UpdateAzureEnv) GetMutationID() string {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv{}
	}
	return t.MutationID
}
func (t *UpdateAzureEnv_UpdateAzureEnv) GetSpec() *AzureEnvSpecFragment {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv{}
	}
	return t.Spec
}
func (t *UpdateAzureEnv_UpdateAzureEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &UpdateAzureEnv_UpdateAzureEnv{}
	}
	return t.SpecRevision
}

type DeleteAzureEnv_DeleteAzureEnv struct {
	MutationID string "json:\"mutationId\" graphql:\"mutationId\""
	PendingMfa bool   "json:\"pendingMFA\" graphql:\"pendingMFA\""
}

func (t *DeleteAzureEnv_DeleteAzureEnv) GetMutationID() string {
	if t == nil {
		t = &DeleteAzureEnv_DeleteAzureEnv{}
	}
	return t.MutationID
}
func (t *DeleteAzureEnv_DeleteAzureEnv) GetPendingMfa() bool {
	if t == nil {
		t = &DeleteAzureEnv_DeleteAzureEnv{}
	}
	return t.PendingMfa
}

type GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}

type GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}

type GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers struct {
	Public   GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers) GetPublic() *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers) GetInternal() *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_NodeGroups struct {
	Name            string            "json:\"name\" graphql:\"name\""
	NodeType        string            "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerZone int64             "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Zones           []string          "json:\"zones\" graphql:\"zones\""
	Reservations    []NodeReservation "json:\"reservations\" graphql:\"reservations\""
}

func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}
func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}

type GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &GetGCPEnv_GcpEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type GetGCPEnv_GcpEnv struct {
	Name         string              "json:\"name\" graphql:\"name\""
	Spec         *GCPEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64               "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *GetGCPEnv_GcpEnv) GetName() string {
	if t == nil {
		t = &GetGCPEnv_GcpEnv{}
	}
	return t.Name
}
func (t *GetGCPEnv_GcpEnv) GetSpec() *GCPEnvSpecFragment {
	if t == nil {
		t = &GetGCPEnv_GcpEnv{}
	}
	return t.Spec
}
func (t *GetGCPEnv_GcpEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &GetGCPEnv_GcpEnv{}
	}
	return t.SpecRevision
}

type GetGCPEnvStatus_GcpEnv_Status_Errors struct {
	Code    EnvStatusErrorCode "json:\"code\" graphql:\"code\""
	Message string             "json:\"message\" graphql:\"message\""
}

func (t *GetGCPEnvStatus_GcpEnv_Status_Errors) GetCode() *EnvStatusErrorCode {
	if t == nil {
		t = &GetGCPEnvStatus_GcpEnv_Status_Errors{}
	}
	return &t.Code
}
func (t *GetGCPEnvStatus_GcpEnv_Status_Errors) GetMessage() string {
	if t == nil {
		t = &GetGCPEnvStatus_GcpEnv_Status_Errors{}
	}
	return t.Message
}

type GetGCPEnvStatus_GcpEnv_Status struct {
	AppliedSpecRevision int64                                   "json:\"appliedSpecRevision\" graphql:\"appliedSpecRevision\""
	PendingDelete       bool                                    "json:\"pendingDelete\" graphql:\"pendingDelete\""
	Errors              []*GetGCPEnvStatus_GcpEnv_Status_Errors "json:\"errors\" graphql:\"errors\""
}

func (t *GetGCPEnvStatus_GcpEnv_Status) GetAppliedSpecRevision() int64 {
	if t == nil {
		t = &GetGCPEnvStatus_GcpEnv_Status{}
	}
	return t.AppliedSpecRevision
}
func (t *GetGCPEnvStatus_GcpEnv_Status) GetPendingDelete() bool {
	if t == nil {
		t = &GetGCPEnvStatus_GcpEnv_Status{}
	}
	return t.PendingDelete
}
func (t *GetGCPEnvStatus_GcpEnv_Status) GetErrors() []*GetGCPEnvStatus_GcpEnv_Status_Errors {
	if t == nil {
		t = &GetGCPEnvStatus_GcpEnv_Status{}
	}
	return t.Errors
}

type GetGCPEnvStatus_GcpEnv struct {
	Name         string                        "json:\"name\" graphql:\"name\""
	SpecRevision int64                         "json:\"specRevision\" graphql:\"specRevision\""
	Status       GetGCPEnvStatus_GcpEnv_Status "json:\"status\" graphql:\"status\""
}

func (t *GetGCPEnvStatus_GcpEnv) GetName() string {
	if t == nil {
		t = &GetGCPEnvStatus_GcpEnv{}
	}
	return t.Name
}
func (t *GetGCPEnvStatus_GcpEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &GetGCPEnvStatus_GcpEnv{}
	}
	return t.SpecRevision
}
func (t *GetGCPEnvStatus_GcpEnv) GetStatus() *GetGCPEnvStatus_GcpEnv_Status {
	if t == nil {
		t = &GetGCPEnvStatus_GcpEnv{}
	}
	return &t.Status
}

type CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}

type CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}

type CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers struct {
	Public   CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers) GetPublic() *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers) GetInternal() *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups struct {
	Name            string            "json:\"name\" graphql:\"name\""
	NodeType        string            "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerZone int64             "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Zones           []string          "json:\"zones\" graphql:\"zones\""
	Reservations    []NodeReservation "json:\"reservations\" graphql:\"reservations\""
}

func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}
func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}

type CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type CreateGCPEnv_CreateGCPEnv struct {
	MutationID   string              "json:\"mutationId\" graphql:\"mutationId\""
	Spec         *GCPEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64               "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *CreateGCPEnv_CreateGCPEnv) GetMutationID() string {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv{}
	}
	return t.MutationID
}
func (t *CreateGCPEnv_CreateGCPEnv) GetSpec() *GCPEnvSpecFragment {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv{}
	}
	return t.Spec
}
func (t *CreateGCPEnv_CreateGCPEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &CreateGCPEnv_CreateGCPEnv{}
	}
	return t.SpecRevision
}

type UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}

type UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}

type UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers struct {
	Public   UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers) GetPublic() *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers) GetInternal() *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups struct {
	Name            string            "json:\"name\" graphql:\"name\""
	NodeType        string            "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerZone int64             "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Zones           []string          "json:\"zones\" graphql:\"zones\""
	Reservations    []NodeReservation "json:\"reservations\" graphql:\"reservations\""
}

func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}
func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}

type UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv_Spec_GCPEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type UpdateGCPEnv_UpdateGCPEnv struct {
	MutationID   string              "json:\"mutationId\" graphql:\"mutationId\""
	Spec         *GCPEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64               "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *UpdateGCPEnv_UpdateGCPEnv) GetMutationID() string {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv{}
	}
	return t.MutationID
}
func (t *UpdateGCPEnv_UpdateGCPEnv) GetSpec() *GCPEnvSpecFragment {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv{}
	}
	return t.Spec
}
func (t *UpdateGCPEnv_UpdateGCPEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &UpdateGCPEnv_UpdateGCPEnv{}
	}
	return t.SpecRevision
}

type DeleteGCPEnv_DeleteGCPEnv struct {
	MutationID string "json:\"mutationId\" graphql:\"mutationId\""
	PendingMfa bool   "json:\"pendingMFA\" graphql:\"pendingMFA\""
}

func (t *DeleteGCPEnv_DeleteGCPEnv) GetMutationID() string {
	if t == nil {
		t = &DeleteGCPEnv_DeleteGCPEnv{}
	}
	return t.MutationID
}
func (t *DeleteGCPEnv_DeleteGCPEnv) GetPendingMfa() bool {
	if t == nil {
		t = &DeleteGCPEnv_DeleteGCPEnv{}
	}
	return t.PendingMfa
}

type GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}

type GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}

type GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers struct {
	Public   GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers) GetPublic() *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers) GetInternal() *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups struct {
	Name                string            "json:\"name\" graphql:\"name\""
	NodeType            string            "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerLocation int64             "json:\"capacityPerLocation\" graphql:\"capacityPerLocation\""
	Locations           []string          "json:\"locations\" graphql:\"locations\""
	Reservations        []NodeReservation "json:\"reservations\" graphql:\"reservations\""
}

func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetCapacityPerLocation() int64 {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerLocation
}
func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetLocations() []string {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.Locations
}
func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}

type GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers struct {
	PublicKey  string   "json:\"publicKey\" graphql:\"publicKey\""
	AllowedIPs []string "json:\"allowedIPs\" graphql:\"allowedIPs\""
	Endpoint   string   "json:\"endpoint\" graphql:\"endpoint\""
}

func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers) GetPublicKey() string {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers{}
	}
	return t.PublicKey
}
func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers) GetAllowedIPs() []string {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers{}
	}
	return t.AllowedIPs
}
func (t *GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers) GetEndpoint() string {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers{}
	}
	return t.Endpoint
}

type GetHCloudEnv_HcloudEnv struct {
	Name         string                 "json:\"name\" graphql:\"name\""
	Spec         *HCloudEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64                  "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *GetHCloudEnv_HcloudEnv) GetName() string {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv{}
	}
	return t.Name
}
func (t *GetHCloudEnv_HcloudEnv) GetSpec() *HCloudEnvSpecFragment {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv{}
	}
	return t.Spec
}
func (t *GetHCloudEnv_HcloudEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &GetHCloudEnv_HcloudEnv{}
	}
	return t.SpecRevision
}

type GetHCloudEnvStatus_HcloudEnv_Status_Errors struct {
	Code    EnvStatusErrorCode "json:\"code\" graphql:\"code\""
	Message string             "json:\"message\" graphql:\"message\""
}

func (t *GetHCloudEnvStatus_HcloudEnv_Status_Errors) GetCode() *EnvStatusErrorCode {
	if t == nil {
		t = &GetHCloudEnvStatus_HcloudEnv_Status_Errors{}
	}
	return &t.Code
}
func (t *GetHCloudEnvStatus_HcloudEnv_Status_Errors) GetMessage() string {
	if t == nil {
		t = &GetHCloudEnvStatus_HcloudEnv_Status_Errors{}
	}
	return t.Message
}

type GetHCloudEnvStatus_HcloudEnv_Status struct {
	AppliedSpecRevision int64                                         "json:\"appliedSpecRevision\" graphql:\"appliedSpecRevision\""
	PendingDelete       bool                                          "json:\"pendingDelete\" graphql:\"pendingDelete\""
	Errors              []*GetHCloudEnvStatus_HcloudEnv_Status_Errors "json:\"errors\" graphql:\"errors\""
}

func (t *GetHCloudEnvStatus_HcloudEnv_Status) GetAppliedSpecRevision() int64 {
	if t == nil {
		t = &GetHCloudEnvStatus_HcloudEnv_Status{}
	}
	return t.AppliedSpecRevision
}
func (t *GetHCloudEnvStatus_HcloudEnv_Status) GetPendingDelete() bool {
	if t == nil {
		t = &GetHCloudEnvStatus_HcloudEnv_Status{}
	}
	return t.PendingDelete
}
func (t *GetHCloudEnvStatus_HcloudEnv_Status) GetErrors() []*GetHCloudEnvStatus_HcloudEnv_Status_Errors {
	if t == nil {
		t = &GetHCloudEnvStatus_HcloudEnv_Status{}
	}
	return t.Errors
}

type GetHCloudEnvStatus_HcloudEnv struct {
	Name         string                              "json:\"name\" graphql:\"name\""
	SpecRevision int64                               "json:\"specRevision\" graphql:\"specRevision\""
	Status       GetHCloudEnvStatus_HcloudEnv_Status "json:\"status\" graphql:\"status\""
}

func (t *GetHCloudEnvStatus_HcloudEnv) GetName() string {
	if t == nil {
		t = &GetHCloudEnvStatus_HcloudEnv{}
	}
	return t.Name
}
func (t *GetHCloudEnvStatus_HcloudEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &GetHCloudEnvStatus_HcloudEnv{}
	}
	return t.SpecRevision
}
func (t *GetHCloudEnvStatus_HcloudEnv) GetStatus() *GetHCloudEnvStatus_HcloudEnv_Status {
	if t == nil {
		t = &GetHCloudEnvStatus_HcloudEnv{}
	}
	return &t.Status
}

type CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}

type CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}

type CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers struct {
	Public   CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers) GetPublic() *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers) GetInternal() *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups struct {
	Name                string            "json:\"name\" graphql:\"name\""
	NodeType            string            "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerLocation int64             "json:\"capacityPerLocation\" graphql:\"capacityPerLocation\""
	Locations           []string          "json:\"locations\" graphql:\"locations\""
	Reservations        []NodeReservation "json:\"reservations\" graphql:\"reservations\""
}

func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetCapacityPerLocation() int64 {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerLocation
}
func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetLocations() []string {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.Locations
}
func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}

type CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers struct {
	PublicKey  string   "json:\"publicKey\" graphql:\"publicKey\""
	AllowedIPs []string "json:\"allowedIPs\" graphql:\"allowedIPs\""
	Endpoint   string   "json:\"endpoint\" graphql:\"endpoint\""
}

func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers) GetPublicKey() string {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers{}
	}
	return t.PublicKey
}
func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers) GetAllowedIPs() []string {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers{}
	}
	return t.AllowedIPs
}
func (t *CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers) GetEndpoint() string {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers{}
	}
	return t.Endpoint
}

type CreateHCloudEnv_CreateHCloudEnv struct {
	MutationID   string                 "json:\"mutationId\" graphql:\"mutationId\""
	Spec         *HCloudEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64                  "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *CreateHCloudEnv_CreateHCloudEnv) GetMutationID() string {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv{}
	}
	return t.MutationID
}
func (t *CreateHCloudEnv_CreateHCloudEnv) GetSpec() *HCloudEnvSpecFragment {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv{}
	}
	return t.Spec
}
func (t *CreateHCloudEnv_CreateHCloudEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &CreateHCloudEnv_CreateHCloudEnv{}
	}
	return t.SpecRevision
}

type UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}

type UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool     "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
}

func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}

type UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers struct {
	Public   UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers) GetPublic() *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers) GetInternal() *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups struct {
	Name                string            "json:\"name\" graphql:\"name\""
	NodeType            string            "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerLocation int64             "json:\"capacityPerLocation\" graphql:\"capacityPerLocation\""
	Locations           []string          "json:\"locations\" graphql:\"locations\""
	Reservations        []NodeReservation "json:\"reservations\" graphql:\"reservations\""
}

func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetCapacityPerLocation() int64 {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerLocation
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetLocations() []string {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.Locations
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}

type UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers struct {
	PublicKey  string   "json:\"publicKey\" graphql:\"publicKey\""
	AllowedIPs []string "json:\"allowedIPs\" graphql:\"allowedIPs\""
	Endpoint   string   "json:\"endpoint\" graphql:\"endpoint\""
}

func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers) GetPublicKey() string {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers{}
	}
	return t.PublicKey
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers) GetAllowedIPs() []string {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers{}
	}
	return t.AllowedIPs
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers) GetEndpoint() string {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv_Spec_HCloudEnvSpecFragment_WireguardPeers{}
	}
	return t.Endpoint
}

type UpdateHCloudEnv_UpdateHCloudEnv struct {
	MutationID   string                 "json:\"mutationId\" graphql:\"mutationId\""
	Spec         *HCloudEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64                  "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *UpdateHCloudEnv_UpdateHCloudEnv) GetMutationID() string {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv{}
	}
	return t.MutationID
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv) GetSpec() *HCloudEnvSpecFragment {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv{}
	}
	return t.Spec
}
func (t *UpdateHCloudEnv_UpdateHCloudEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &UpdateHCloudEnv_UpdateHCloudEnv{}
	}
	return t.SpecRevision
}

type DeleteHCloudEnv_DeleteHCloudEnv struct {
	MutationID string "json:\"mutationId\" graphql:\"mutationId\""
	PendingMfa bool   "json:\"pendingMFA\" graphql:\"pendingMFA\""
}

func (t *DeleteHCloudEnv_DeleteHCloudEnv) GetMutationID() string {
	if t == nil {
		t = &DeleteHCloudEnv_DeleteHCloudEnv{}
	}
	return t.MutationID
}
func (t *DeleteHCloudEnv_DeleteHCloudEnv) GetPendingMfa() bool {
	if t == nil {
		t = &DeleteHCloudEnv_DeleteHCloudEnv{}
	}
	return t.PendingMfa
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations) GetKey() string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations{}
	}
	return t.Key
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations) GetValue() string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations{}
	}
	return t.Value
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool                                                                         "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string                                                                     "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	Annotations    []*GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations "json:\"annotations\" graphql:\"annotations\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public) GetAnnotations() []*GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Annotations
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations) GetKey() string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations{}
	}
	return t.Key
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations) GetValue() string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations{}
	}
	return t.Value
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool                                                                           "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string                                                                       "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	Annotations    []*GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations "json:\"annotations\" graphql:\"annotations\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal) GetAnnotations() []*GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Annotations
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers struct {
	Public   GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers) GetPublic() *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers) GetInternal() *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector) GetKey() string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector{}
	}
	return t.Key
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector) GetValue() string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector{}
	}
	return t.Value
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations struct {
	Effect   NodeTolerationEffect   "json:\"effect\" graphql:\"effect\""
	Operator NodeTolerationOperator "json:\"operator\" graphql:\"operator\""
	Key      string                 "json:\"key\" graphql:\"key\""
	Value    string                 "json:\"value\" graphql:\"value\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations) GetEffect() *NodeTolerationEffect {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return &t.Effect
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations) GetOperator() *NodeTolerationOperator {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return &t.Operator
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations) GetKey() string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return t.Key
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations) GetValue() string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return t.Value
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups struct {
	Name            string                                                             "json:\"name\" graphql:\"name\""
	NodeType        string                                                             "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerZone int64                                                              "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Selector        []*GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector    "json:\"selector\" graphql:\"selector\""
	Tolerations     []*GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations "json:\"tolerations\" graphql:\"tolerations\""
	Reservations    []NodeReservation                                                  "json:\"reservations\" graphql:\"reservations\""
	Zones           []string                                                           "json:\"zones\" graphql:\"zones\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetSelector() []*GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Selector
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetTolerations() []*GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Tolerations
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes struct {
	Name                  string  "json:\"name\" graphql:\"name\""
	CPUAllocatable        float64 "json:\"cpuAllocatable\" graphql:\"cpuAllocatable\""
	MemAllocatableInBytes int64   "json:\"memAllocatableInBytes\" graphql:\"memAllocatableInBytes\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes) GetName() string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes{}
	}
	return t.Name
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes) GetCPUAllocatable() float64 {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes{}
	}
	return t.CPUAllocatable
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes) GetMemAllocatableInBytes() int64 {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes{}
	}
	return t.MemAllocatableInBytes
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Metrics struct {
	RetentionPeriodInDays *int64 "json:\"retentionPeriodInDays,omitempty\" graphql:\"retentionPeriodInDays\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Metrics) GetRetentionPeriodInDays() *int64 {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Metrics{}
	}
	return t.RetentionPeriodInDays
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3 struct {
	BucketName *string "json:\"bucketName,omitempty\" graphql:\"bucketName\""
	Region     *string "json:\"region,omitempty\" graphql:\"region\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3) GetBucketName() *string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3{}
	}
	return t.BucketName
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3) GetRegion() *string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3{}
	}
	return t.Region
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs struct {
	BucketName *string "json:\"bucketName,omitempty\" graphql:\"bucketName\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs) GetBucketName() *string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs{}
	}
	return t.BucketName
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage struct {
	S3  *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3  "json:\"s3,omitempty\" graphql:\"s3\""
	Gcs *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs "json:\"gcs,omitempty\" graphql:\"gcs\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage) GetS3() *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3 {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage{}
	}
	return t.S3
}
func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage) GetGcs() *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage{}
	}
	return t.Gcs
}

type GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs struct {
	Storage GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage "json:\"storage\" graphql:\"storage\""
}

func (t *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs) GetStorage() *GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs_Storage {
	if t == nil {
		t = &GetK8SEnv_K8sEnv_Spec_K8SEnvSpecFragment_Logs{}
	}
	return &t.Storage
}

type GetK8SEnv_K8sEnv struct {
	Name         string              "json:\"name\" graphql:\"name\""
	Spec         *K8SEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64               "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *GetK8SEnv_K8sEnv) GetName() string {
	if t == nil {
		t = &GetK8SEnv_K8sEnv{}
	}
	return t.Name
}
func (t *GetK8SEnv_K8sEnv) GetSpec() *K8SEnvSpecFragment {
	if t == nil {
		t = &GetK8SEnv_K8sEnv{}
	}
	return t.Spec
}
func (t *GetK8SEnv_K8sEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &GetK8SEnv_K8sEnv{}
	}
	return t.SpecRevision
}

type GetK8SEnvStatus_K8sEnv_Status_Errors struct {
	Code    EnvStatusErrorCode "json:\"code\" graphql:\"code\""
	Message string             "json:\"message\" graphql:\"message\""
}

func (t *GetK8SEnvStatus_K8sEnv_Status_Errors) GetCode() *EnvStatusErrorCode {
	if t == nil {
		t = &GetK8SEnvStatus_K8sEnv_Status_Errors{}
	}
	return &t.Code
}
func (t *GetK8SEnvStatus_K8sEnv_Status_Errors) GetMessage() string {
	if t == nil {
		t = &GetK8SEnvStatus_K8sEnv_Status_Errors{}
	}
	return t.Message
}

type GetK8SEnvStatus_K8sEnv_Status struct {
	AppliedSpecRevision int64                                   "json:\"appliedSpecRevision\" graphql:\"appliedSpecRevision\""
	PendingDelete       bool                                    "json:\"pendingDelete\" graphql:\"pendingDelete\""
	Errors              []*GetK8SEnvStatus_K8sEnv_Status_Errors "json:\"errors\" graphql:\"errors\""
}

func (t *GetK8SEnvStatus_K8sEnv_Status) GetAppliedSpecRevision() int64 {
	if t == nil {
		t = &GetK8SEnvStatus_K8sEnv_Status{}
	}
	return t.AppliedSpecRevision
}
func (t *GetK8SEnvStatus_K8sEnv_Status) GetPendingDelete() bool {
	if t == nil {
		t = &GetK8SEnvStatus_K8sEnv_Status{}
	}
	return t.PendingDelete
}
func (t *GetK8SEnvStatus_K8sEnv_Status) GetErrors() []*GetK8SEnvStatus_K8sEnv_Status_Errors {
	if t == nil {
		t = &GetK8SEnvStatus_K8sEnv_Status{}
	}
	return t.Errors
}

type GetK8SEnvStatus_K8sEnv struct {
	Name         string                        "json:\"name\" graphql:\"name\""
	SpecRevision int64                         "json:\"specRevision\" graphql:\"specRevision\""
	Status       GetK8SEnvStatus_K8sEnv_Status "json:\"status\" graphql:\"status\""
}

func (t *GetK8SEnvStatus_K8sEnv) GetName() string {
	if t == nil {
		t = &GetK8SEnvStatus_K8sEnv{}
	}
	return t.Name
}
func (t *GetK8SEnvStatus_K8sEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &GetK8SEnvStatus_K8sEnv{}
	}
	return t.SpecRevision
}
func (t *GetK8SEnvStatus_K8sEnv) GetStatus() *GetK8SEnvStatus_K8sEnv_Status {
	if t == nil {
		t = &GetK8SEnvStatus_K8sEnv{}
	}
	return &t.Status
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations) GetKey() string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations{}
	}
	return t.Key
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations) GetValue() string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations{}
	}
	return t.Value
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool                                                                                  "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string                                                                              "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	Annotations    []*CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations "json:\"annotations\" graphql:\"annotations\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public) GetAnnotations() []*CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Annotations
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations) GetKey() string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations{}
	}
	return t.Key
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations) GetValue() string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations{}
	}
	return t.Value
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool                                                                                    "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string                                                                                "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	Annotations    []*CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations "json:\"annotations\" graphql:\"annotations\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal) GetAnnotations() []*CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Annotations
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers struct {
	Public   CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers) GetPublic() *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers) GetInternal() *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector) GetKey() string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector{}
	}
	return t.Key
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector) GetValue() string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector{}
	}
	return t.Value
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations struct {
	Effect   NodeTolerationEffect   "json:\"effect\" graphql:\"effect\""
	Operator NodeTolerationOperator "json:\"operator\" graphql:\"operator\""
	Key      string                 "json:\"key\" graphql:\"key\""
	Value    string                 "json:\"value\" graphql:\"value\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations) GetEffect() *NodeTolerationEffect {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return &t.Effect
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations) GetOperator() *NodeTolerationOperator {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return &t.Operator
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations) GetKey() string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return t.Key
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations) GetValue() string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return t.Value
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups struct {
	Name            string                                                                      "json:\"name\" graphql:\"name\""
	NodeType        string                                                                      "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerZone int64                                                                       "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Selector        []*CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector    "json:\"selector\" graphql:\"selector\""
	Tolerations     []*CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations "json:\"tolerations\" graphql:\"tolerations\""
	Reservations    []NodeReservation                                                           "json:\"reservations\" graphql:\"reservations\""
	Zones           []string                                                                    "json:\"zones\" graphql:\"zones\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetSelector() []*CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Selector
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetTolerations() []*CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Tolerations
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes struct {
	Name                  string  "json:\"name\" graphql:\"name\""
	CPUAllocatable        float64 "json:\"cpuAllocatable\" graphql:\"cpuAllocatable\""
	MemAllocatableInBytes int64   "json:\"memAllocatableInBytes\" graphql:\"memAllocatableInBytes\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes) GetName() string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes{}
	}
	return t.Name
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes) GetCPUAllocatable() float64 {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes{}
	}
	return t.CPUAllocatable
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes) GetMemAllocatableInBytes() int64 {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes{}
	}
	return t.MemAllocatableInBytes
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Metrics struct {
	RetentionPeriodInDays *int64 "json:\"retentionPeriodInDays,omitempty\" graphql:\"retentionPeriodInDays\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Metrics) GetRetentionPeriodInDays() *int64 {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Metrics{}
	}
	return t.RetentionPeriodInDays
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3 struct {
	BucketName *string "json:\"bucketName,omitempty\" graphql:\"bucketName\""
	Region     *string "json:\"region,omitempty\" graphql:\"region\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3) GetBucketName() *string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3{}
	}
	return t.BucketName
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3) GetRegion() *string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3{}
	}
	return t.Region
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs struct {
	BucketName *string "json:\"bucketName,omitempty\" graphql:\"bucketName\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs) GetBucketName() *string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs{}
	}
	return t.BucketName
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage struct {
	S3  *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3  "json:\"s3,omitempty\" graphql:\"s3\""
	Gcs *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs "json:\"gcs,omitempty\" graphql:\"gcs\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage) GetS3() *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3 {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage{}
	}
	return t.S3
}
func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage) GetGcs() *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage{}
	}
	return t.Gcs
}

type CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs struct {
	Storage CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage "json:\"storage\" graphql:\"storage\""
}

func (t *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs) GetStorage() *CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv_Spec_K8SEnvSpecFragment_Logs{}
	}
	return &t.Storage
}

type CreateK8SEnv_CreateK8SEnv struct {
	MutationID   string              "json:\"mutationId\" graphql:\"mutationId\""
	Spec         *K8SEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64               "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *CreateK8SEnv_CreateK8SEnv) GetMutationID() string {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv{}
	}
	return t.MutationID
}
func (t *CreateK8SEnv_CreateK8SEnv) GetSpec() *K8SEnvSpecFragment {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv{}
	}
	return t.Spec
}
func (t *CreateK8SEnv_CreateK8SEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &CreateK8SEnv_CreateK8SEnv{}
	}
	return t.SpecRevision
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations) GetKey() string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations{}
	}
	return t.Key
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations) GetValue() string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations{}
	}
	return t.Value
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public struct {
	Enabled        bool                                                                                  "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string                                                                              "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	Annotations    []*UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations "json:\"annotations\" graphql:\"annotations\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public) GetEnabled() bool {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Enabled
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public) GetSourceIPRanges() []string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.SourceIPRanges
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public) GetAnnotations() []*UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public_Annotations {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public{}
	}
	return t.Annotations
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations) GetKey() string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations{}
	}
	return t.Key
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations) GetValue() string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations{}
	}
	return t.Value
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal struct {
	Enabled        bool                                                                                    "json:\"enabled\" graphql:\"enabled\""
	SourceIPRanges []string                                                                                "json:\"sourceIPRanges\" graphql:\"sourceIPRanges\""
	Annotations    []*UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations "json:\"annotations\" graphql:\"annotations\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal) GetEnabled() bool {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Enabled
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal) GetSourceIPRanges() []string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.SourceIPRanges
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal) GetAnnotations() []*UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal_Annotations {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal{}
	}
	return t.Annotations
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers struct {
	Public   UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public   "json:\"public\" graphql:\"public\""
	Internal UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal "json:\"internal\" graphql:\"internal\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers) GetPublic() *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Public {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers{}
	}
	return &t.Public
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers) GetInternal() *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers_Internal {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_LoadBalancers{}
	}
	return &t.Internal
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector) GetKey() string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector{}
	}
	return t.Key
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector) GetValue() string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector{}
	}
	return t.Value
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations struct {
	Effect   NodeTolerationEffect   "json:\"effect\" graphql:\"effect\""
	Operator NodeTolerationOperator "json:\"operator\" graphql:\"operator\""
	Key      string                 "json:\"key\" graphql:\"key\""
	Value    string                 "json:\"value\" graphql:\"value\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations) GetEffect() *NodeTolerationEffect {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return &t.Effect
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations) GetOperator() *NodeTolerationOperator {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return &t.Operator
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations) GetKey() string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return t.Key
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations) GetValue() string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations{}
	}
	return t.Value
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups struct {
	Name            string                                                                      "json:\"name\" graphql:\"name\""
	NodeType        string                                                                      "json:\"nodeType\" graphql:\"nodeType\""
	CapacityPerZone int64                                                                       "json:\"capacityPerZone\" graphql:\"capacityPerZone\""
	Selector        []*UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector    "json:\"selector\" graphql:\"selector\""
	Tolerations     []*UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations "json:\"tolerations\" graphql:\"tolerations\""
	Reservations    []NodeReservation                                                           "json:\"reservations\" graphql:\"reservations\""
	Zones           []string                                                                    "json:\"zones\" graphql:\"zones\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetName() string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Name
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetNodeType() string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.NodeType
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetCapacityPerZone() int64 {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.CapacityPerZone
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetSelector() []*UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Selector {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Selector
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetTolerations() []*UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups_Tolerations {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Tolerations
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetReservations() []NodeReservation {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Reservations
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups) GetZones() []string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_NodeGroups{}
	}
	return t.Zones
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes struct {
	Name                  string  "json:\"name\" graphql:\"name\""
	CPUAllocatable        float64 "json:\"cpuAllocatable\" graphql:\"cpuAllocatable\""
	MemAllocatableInBytes int64   "json:\"memAllocatableInBytes\" graphql:\"memAllocatableInBytes\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes) GetName() string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes{}
	}
	return t.Name
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes) GetCPUAllocatable() float64 {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes{}
	}
	return t.CPUAllocatable
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes) GetMemAllocatableInBytes() int64 {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_CustomNodeTypes{}
	}
	return t.MemAllocatableInBytes
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows struct {
	Name          string "json:\"name\" graphql:\"name\""
	Enabled       bool   "json:\"enabled\" graphql:\"enabled\""
	Hour          int64  "json:\"hour\" graphql:\"hour\""
	LengthInHours int64  "json:\"lengthInHours\" graphql:\"lengthInHours\""
	Days          []Day  "json:\"days\" graphql:\"days\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetName() string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Name
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetEnabled() bool {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Enabled
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetHour() int64 {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Hour
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetLengthInHours() int64 {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.LengthInHours
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows) GetDays() []Day {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_MaintenanceWindows{}
	}
	return t.Days
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Metrics struct {
	RetentionPeriodInDays *int64 "json:\"retentionPeriodInDays,omitempty\" graphql:\"retentionPeriodInDays\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Metrics) GetRetentionPeriodInDays() *int64 {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Metrics{}
	}
	return t.RetentionPeriodInDays
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3 struct {
	BucketName *string "json:\"bucketName,omitempty\" graphql:\"bucketName\""
	Region     *string "json:\"region,omitempty\" graphql:\"region\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3) GetBucketName() *string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3{}
	}
	return t.BucketName
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3) GetRegion() *string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3{}
	}
	return t.Region
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs struct {
	BucketName *string "json:\"bucketName,omitempty\" graphql:\"bucketName\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs) GetBucketName() *string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs{}
	}
	return t.BucketName
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage struct {
	S3  *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3  "json:\"s3,omitempty\" graphql:\"s3\""
	Gcs *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs "json:\"gcs,omitempty\" graphql:\"gcs\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage) GetS3() *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_S3 {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage{}
	}
	return t.S3
}
func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage) GetGcs() *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage_Gcs {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage{}
	}
	return t.Gcs
}

type UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs struct {
	Storage UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage "json:\"storage\" graphql:\"storage\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs) GetStorage() *UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs_Storage {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv_Spec_K8SEnvSpecFragment_Logs{}
	}
	return &t.Storage
}

type UpdateK8SEnv_UpdateK8SEnv struct {
	MutationID   string              "json:\"mutationId\" graphql:\"mutationId\""
	Spec         *K8SEnvSpecFragment "json:\"spec\" graphql:\"spec\""
	SpecRevision int64               "json:\"specRevision\" graphql:\"specRevision\""
}

func (t *UpdateK8SEnv_UpdateK8SEnv) GetMutationID() string {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv{}
	}
	return t.MutationID
}
func (t *UpdateK8SEnv_UpdateK8SEnv) GetSpec() *K8SEnvSpecFragment {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv{}
	}
	return t.Spec
}
func (t *UpdateK8SEnv_UpdateK8SEnv) GetSpecRevision() int64 {
	if t == nil {
		t = &UpdateK8SEnv_UpdateK8SEnv{}
	}
	return t.SpecRevision
}

type DeleteK8SEnv_DeleteK8SEnv struct {
	MutationID string "json:\"mutationId\" graphql:\"mutationId\""
	PendingMfa bool   "json:\"pendingMFA\" graphql:\"pendingMFA\""
}

func (t *DeleteK8SEnv_DeleteK8SEnv) GetMutationID() string {
	if t == nil {
		t = &DeleteK8SEnv_DeleteK8SEnv{}
	}
	return t.MutationID
}
func (t *DeleteK8SEnv_DeleteK8SEnv) GetPendingMfa() bool {
	if t == nil {
		t = &DeleteK8SEnv_DeleteK8SEnv{}
	}
	return t.PendingMfa
}

type GetAWSEnv struct {
	AwsEnv *GetAWSEnv_AwsEnv "json:\"awsEnv,omitempty\" graphql:\"awsEnv\""
}

func (t *GetAWSEnv) GetAwsEnv() *GetAWSEnv_AwsEnv {
	if t == nil {
		t = &GetAWSEnv{}
	}
	return t.AwsEnv
}

type GetAWSEnvStatus struct {
	AwsEnv *GetAWSEnvStatus_AwsEnv "json:\"awsEnv,omitempty\" graphql:\"awsEnv\""
}

func (t *GetAWSEnvStatus) GetAwsEnv() *GetAWSEnvStatus_AwsEnv {
	if t == nil {
		t = &GetAWSEnvStatus{}
	}
	return t.AwsEnv
}

type CreateAWSEnv struct {
	CreateAWSEnv CreateAWSEnv_CreateAWSEnv "json:\"createAWSEnv\" graphql:\"createAWSEnv\""
}

func (t *CreateAWSEnv) GetCreateAWSEnv() *CreateAWSEnv_CreateAWSEnv {
	if t == nil {
		t = &CreateAWSEnv{}
	}
	return &t.CreateAWSEnv
}

type UpdateAWSEnv struct {
	UpdateAWSEnv UpdateAWSEnv_UpdateAWSEnv "json:\"updateAWSEnv\" graphql:\"updateAWSEnv\""
}

func (t *UpdateAWSEnv) GetUpdateAWSEnv() *UpdateAWSEnv_UpdateAWSEnv {
	if t == nil {
		t = &UpdateAWSEnv{}
	}
	return &t.UpdateAWSEnv
}

type DeleteAWSEnv struct {
	DeleteAWSEnv DeleteAWSEnv_DeleteAWSEnv "json:\"deleteAWSEnv\" graphql:\"deleteAWSEnv\""
}

func (t *DeleteAWSEnv) GetDeleteAWSEnv() *DeleteAWSEnv_DeleteAWSEnv {
	if t == nil {
		t = &DeleteAWSEnv{}
	}
	return &t.DeleteAWSEnv
}

type GetAzureEnv struct {
	AzureEnv *GetAzureEnv_AzureEnv "json:\"azureEnv,omitempty\" graphql:\"azureEnv\""
}

func (t *GetAzureEnv) GetAzureEnv() *GetAzureEnv_AzureEnv {
	if t == nil {
		t = &GetAzureEnv{}
	}
	return t.AzureEnv
}

type GetAzureEnvStatus struct {
	AzureEnv *GetAzureEnvStatus_AzureEnv "json:\"azureEnv,omitempty\" graphql:\"azureEnv\""
}

func (t *GetAzureEnvStatus) GetAzureEnv() *GetAzureEnvStatus_AzureEnv {
	if t == nil {
		t = &GetAzureEnvStatus{}
	}
	return t.AzureEnv
}

type CreateAzureEnv struct {
	CreateAzureEnv CreateAzureEnv_CreateAzureEnv "json:\"createAzureEnv\" graphql:\"createAzureEnv\""
}

func (t *CreateAzureEnv) GetCreateAzureEnv() *CreateAzureEnv_CreateAzureEnv {
	if t == nil {
		t = &CreateAzureEnv{}
	}
	return &t.CreateAzureEnv
}

type UpdateAzureEnv struct {
	UpdateAzureEnv UpdateAzureEnv_UpdateAzureEnv "json:\"updateAzureEnv\" graphql:\"updateAzureEnv\""
}

func (t *UpdateAzureEnv) GetUpdateAzureEnv() *UpdateAzureEnv_UpdateAzureEnv {
	if t == nil {
		t = &UpdateAzureEnv{}
	}
	return &t.UpdateAzureEnv
}

type DeleteAzureEnv struct {
	DeleteAzureEnv DeleteAzureEnv_DeleteAzureEnv "json:\"deleteAzureEnv\" graphql:\"deleteAzureEnv\""
}

func (t *DeleteAzureEnv) GetDeleteAzureEnv() *DeleteAzureEnv_DeleteAzureEnv {
	if t == nil {
		t = &DeleteAzureEnv{}
	}
	return &t.DeleteAzureEnv
}

type GetGCPEnv struct {
	GcpEnv *GetGCPEnv_GcpEnv "json:\"gcpEnv,omitempty\" graphql:\"gcpEnv\""
}

func (t *GetGCPEnv) GetGcpEnv() *GetGCPEnv_GcpEnv {
	if t == nil {
		t = &GetGCPEnv{}
	}
	return t.GcpEnv
}

type GetGCPEnvStatus struct {
	GcpEnv *GetGCPEnvStatus_GcpEnv "json:\"gcpEnv,omitempty\" graphql:\"gcpEnv\""
}

func (t *GetGCPEnvStatus) GetGcpEnv() *GetGCPEnvStatus_GcpEnv {
	if t == nil {
		t = &GetGCPEnvStatus{}
	}
	return t.GcpEnv
}

type CreateGCPEnv struct {
	CreateGCPEnv CreateGCPEnv_CreateGCPEnv "json:\"createGCPEnv\" graphql:\"createGCPEnv\""
}

func (t *CreateGCPEnv) GetCreateGCPEnv() *CreateGCPEnv_CreateGCPEnv {
	if t == nil {
		t = &CreateGCPEnv{}
	}
	return &t.CreateGCPEnv
}

type UpdateGCPEnv struct {
	UpdateGCPEnv UpdateGCPEnv_UpdateGCPEnv "json:\"updateGCPEnv\" graphql:\"updateGCPEnv\""
}

func (t *UpdateGCPEnv) GetUpdateGCPEnv() *UpdateGCPEnv_UpdateGCPEnv {
	if t == nil {
		t = &UpdateGCPEnv{}
	}
	return &t.UpdateGCPEnv
}

type DeleteGCPEnv struct {
	DeleteGCPEnv DeleteGCPEnv_DeleteGCPEnv "json:\"deleteGCPEnv\" graphql:\"deleteGCPEnv\""
}

func (t *DeleteGCPEnv) GetDeleteGCPEnv() *DeleteGCPEnv_DeleteGCPEnv {
	if t == nil {
		t = &DeleteGCPEnv{}
	}
	return &t.DeleteGCPEnv
}

type GetHCloudEnv struct {
	HcloudEnv *GetHCloudEnv_HcloudEnv "json:\"hcloudEnv,omitempty\" graphql:\"hcloudEnv\""
}

func (t *GetHCloudEnv) GetHcloudEnv() *GetHCloudEnv_HcloudEnv {
	if t == nil {
		t = &GetHCloudEnv{}
	}
	return t.HcloudEnv
}

type GetHCloudEnvStatus struct {
	HcloudEnv *GetHCloudEnvStatus_HcloudEnv "json:\"hcloudEnv,omitempty\" graphql:\"hcloudEnv\""
}

func (t *GetHCloudEnvStatus) GetHcloudEnv() *GetHCloudEnvStatus_HcloudEnv {
	if t == nil {
		t = &GetHCloudEnvStatus{}
	}
	return t.HcloudEnv
}

type CreateHCloudEnv struct {
	CreateHCloudEnv CreateHCloudEnv_CreateHCloudEnv "json:\"createHCloudEnv\" graphql:\"createHCloudEnv\""
}

func (t *CreateHCloudEnv) GetCreateHCloudEnv() *CreateHCloudEnv_CreateHCloudEnv {
	if t == nil {
		t = &CreateHCloudEnv{}
	}
	return &t.CreateHCloudEnv
}

type UpdateHCloudEnv struct {
	UpdateHCloudEnv UpdateHCloudEnv_UpdateHCloudEnv "json:\"updateHCloudEnv\" graphql:\"updateHCloudEnv\""
}

func (t *UpdateHCloudEnv) GetUpdateHCloudEnv() *UpdateHCloudEnv_UpdateHCloudEnv {
	if t == nil {
		t = &UpdateHCloudEnv{}
	}
	return &t.UpdateHCloudEnv
}

type DeleteHCloudEnv struct {
	DeleteHCloudEnv DeleteHCloudEnv_DeleteHCloudEnv "json:\"deleteHCloudEnv\" graphql:\"deleteHCloudEnv\""
}

func (t *DeleteHCloudEnv) GetDeleteHCloudEnv() *DeleteHCloudEnv_DeleteHCloudEnv {
	if t == nil {
		t = &DeleteHCloudEnv{}
	}
	return &t.DeleteHCloudEnv
}

type GetK8SEnv struct {
	K8sEnv *GetK8SEnv_K8sEnv "json:\"k8sEnv,omitempty\" graphql:\"k8sEnv\""
}

func (t *GetK8SEnv) GetK8sEnv() *GetK8SEnv_K8sEnv {
	if t == nil {
		t = &GetK8SEnv{}
	}
	return t.K8sEnv
}

type GetK8SEnvStatus struct {
	K8sEnv *GetK8SEnvStatus_K8sEnv "json:\"k8sEnv,omitempty\" graphql:\"k8sEnv\""
}

func (t *GetK8SEnvStatus) GetK8sEnv() *GetK8SEnvStatus_K8sEnv {
	if t == nil {
		t = &GetK8SEnvStatus{}
	}
	return t.K8sEnv
}

type CreateK8SEnv struct {
	CreateK8SEnv CreateK8SEnv_CreateK8SEnv "json:\"createK8SEnv\" graphql:\"createK8SEnv\""
}

func (t *CreateK8SEnv) GetCreateK8SEnv() *CreateK8SEnv_CreateK8SEnv {
	if t == nil {
		t = &CreateK8SEnv{}
	}
	return &t.CreateK8SEnv
}

type UpdateK8SEnv struct {
	UpdateK8SEnv UpdateK8SEnv_UpdateK8SEnv "json:\"updateK8SEnv\" graphql:\"updateK8SEnv\""
}

func (t *UpdateK8SEnv) GetUpdateK8SEnv() *UpdateK8SEnv_UpdateK8SEnv {
	if t == nil {
		t = &UpdateK8SEnv{}
	}
	return &t.UpdateK8SEnv
}

type DeleteK8SEnv struct {
	DeleteK8SEnv DeleteK8SEnv_DeleteK8SEnv "json:\"deleteK8SEnv\" graphql:\"deleteK8SEnv\""
}

func (t *DeleteK8SEnv) GetDeleteK8SEnv() *DeleteK8SEnv_DeleteK8SEnv {
	if t == nil {
		t = &DeleteK8SEnv{}
	}
	return &t.DeleteK8SEnv
}

const GetAWSEnvDocument = `query GetAWSEnv ($name: String!) {
	awsEnv(name: $name) {
		name
		spec {
			... AWSEnvSpecFragment
		}
		specRevision
	}
}
fragment AWSEnvSpecFragment on AWSEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
			crossZone
		}
		internal {
			enabled
			sourceIPRanges
			crossZone
			endpointServiceAllowedPrincipals
		}
	}
	loadBalancingStrategy
	customDomain
	nodeGroups {
		name
		nodeType
		zones
		capacityPerZone
		reservations
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	region
	zones
	cidr
	awsAccountID
	peeringConnections {
		awsAccountID
		vpcID
		vpcRegion
	}
	endpoints {
		serviceName
		alias
		privateDNS
	}
	tags {
		key
		value
	}
	cloudConnect
}
`

func (c *Client) GetAWSEnv(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetAWSEnv, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetAWSEnv
	if err := c.Client.Post(ctx, "GetAWSEnv", GetAWSEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAWSEnvStatusDocument = `query GetAWSEnvStatus ($name: String!) {
	awsEnv(name: $name) {
		name
		specRevision
		status {
			appliedSpecRevision
			pendingDelete
			loadBalancers {
				internal {
					endpointServiceName
				}
			}
			peeringConnections {
				id
				vpcID
			}
			errors {
				code
				message
			}
		}
	}
}
`

func (c *Client) GetAWSEnvStatus(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetAWSEnvStatus, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetAWSEnvStatus
	if err := c.Client.Post(ctx, "GetAWSEnvStatus", GetAWSEnvStatusDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateAWSEnvDocument = `mutation CreateAWSEnv ($input: CreateAWSEnvInput!) {
	createAWSEnv(input: $input) {
		mutationId
		spec {
			... AWSEnvSpecFragment
		}
		specRevision
	}
}
fragment AWSEnvSpecFragment on AWSEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
			crossZone
		}
		internal {
			enabled
			sourceIPRanges
			crossZone
			endpointServiceAllowedPrincipals
		}
	}
	loadBalancingStrategy
	customDomain
	nodeGroups {
		name
		nodeType
		zones
		capacityPerZone
		reservations
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	region
	zones
	cidr
	awsAccountID
	peeringConnections {
		awsAccountID
		vpcID
		vpcRegion
	}
	endpoints {
		serviceName
		alias
		privateDNS
	}
	tags {
		key
		value
	}
	cloudConnect
}
`

func (c *Client) CreateAWSEnv(ctx context.Context, input CreateAWSEnvInput, interceptors ...clientv2.RequestInterceptor) (*CreateAWSEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateAWSEnv
	if err := c.Client.Post(ctx, "CreateAWSEnv", CreateAWSEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateAWSEnvDocument = `mutation UpdateAWSEnv ($input: UpdateAWSEnvInput!) {
	updateAWSEnv(input: $input) {
		mutationId
		spec {
			... AWSEnvSpecFragment
		}
		specRevision
	}
}
fragment AWSEnvSpecFragment on AWSEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
			crossZone
		}
		internal {
			enabled
			sourceIPRanges
			crossZone
			endpointServiceAllowedPrincipals
		}
	}
	loadBalancingStrategy
	customDomain
	nodeGroups {
		name
		nodeType
		zones
		capacityPerZone
		reservations
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	region
	zones
	cidr
	awsAccountID
	peeringConnections {
		awsAccountID
		vpcID
		vpcRegion
	}
	endpoints {
		serviceName
		alias
		privateDNS
	}
	tags {
		key
		value
	}
	cloudConnect
}
`

func (c *Client) UpdateAWSEnv(ctx context.Context, input UpdateAWSEnvInput, interceptors ...clientv2.RequestInterceptor) (*UpdateAWSEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res UpdateAWSEnv
	if err := c.Client.Post(ctx, "UpdateAWSEnv", UpdateAWSEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteAWSEnvDocument = `mutation DeleteAWSEnv ($input: DeleteAWSEnvInput!) {
	deleteAWSEnv(input: $input) {
		mutationId
		pendingMFA
	}
}
`

func (c *Client) DeleteAWSEnv(ctx context.Context, input DeleteAWSEnvInput, interceptors ...clientv2.RequestInterceptor) (*DeleteAWSEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res DeleteAWSEnv
	if err := c.Client.Post(ctx, "DeleteAWSEnv", DeleteAWSEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAzureEnvDocument = `query GetAzureEnv ($name: String!) {
	azureEnv(name: $name) {
		name
		spec {
			... AzureEnvSpecFragment
		}
		specRevision
	}
}
fragment AzureEnvSpecFragment on AzureEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
		}
		internal {
			enabled
			sourceIPRanges
		}
	}
	loadBalancingStrategy
	customDomain
	nodeGroups {
		name
		nodeType
		capacityPerZone
		reservations
		zones
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	tags {
		key
		value
	}
	privateLinkService {
		allowedSubscriptions
	}
	region
	zones
	cidr
	tenantID
	subscriptionID
	cloudConnect
}
`

func (c *Client) GetAzureEnv(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetAzureEnv, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetAzureEnv
	if err := c.Client.Post(ctx, "GetAzureEnv", GetAzureEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAzureEnvStatusDocument = `query GetAzureEnvStatus ($name: String!) {
	azureEnv(name: $name) {
		name
		specRevision
		status {
			appliedSpecRevision
			pendingDelete
			loadBalancers {
				internal {
					privateLinkServiceAlias
				}
			}
			errors {
				code
				message
			}
		}
	}
}
`

func (c *Client) GetAzureEnvStatus(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetAzureEnvStatus, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetAzureEnvStatus
	if err := c.Client.Post(ctx, "GetAzureEnvStatus", GetAzureEnvStatusDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateAzureEnvDocument = `mutation CreateAzureEnv ($input: CreateAzureEnvInput!) {
	createAzureEnv(input: $input) {
		mutationId
		spec {
			... AzureEnvSpecFragment
		}
		specRevision
	}
}
fragment AzureEnvSpecFragment on AzureEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
		}
		internal {
			enabled
			sourceIPRanges
		}
	}
	loadBalancingStrategy
	customDomain
	nodeGroups {
		name
		nodeType
		capacityPerZone
		reservations
		zones
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	tags {
		key
		value
	}
	privateLinkService {
		allowedSubscriptions
	}
	region
	zones
	cidr
	tenantID
	subscriptionID
	cloudConnect
}
`

func (c *Client) CreateAzureEnv(ctx context.Context, input CreateAzureEnvInput, interceptors ...clientv2.RequestInterceptor) (*CreateAzureEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateAzureEnv
	if err := c.Client.Post(ctx, "CreateAzureEnv", CreateAzureEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateAzureEnvDocument = `mutation UpdateAzureEnv ($input: UpdateAzureEnvInput!) {
	updateAzureEnv(input: $input) {
		mutationId
		spec {
			... AzureEnvSpecFragment
		}
		specRevision
	}
}
fragment AzureEnvSpecFragment on AzureEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
		}
		internal {
			enabled
			sourceIPRanges
		}
	}
	loadBalancingStrategy
	customDomain
	nodeGroups {
		name
		nodeType
		capacityPerZone
		reservations
		zones
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	tags {
		key
		value
	}
	privateLinkService {
		allowedSubscriptions
	}
	region
	zones
	cidr
	tenantID
	subscriptionID
	cloudConnect
}
`

func (c *Client) UpdateAzureEnv(ctx context.Context, input UpdateAzureEnvInput, interceptors ...clientv2.RequestInterceptor) (*UpdateAzureEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res UpdateAzureEnv
	if err := c.Client.Post(ctx, "UpdateAzureEnv", UpdateAzureEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteAzureEnvDocument = `mutation DeleteAzureEnv ($input: DeleteAzureEnvInput!) {
	deleteAzureEnv(input: $input) {
		mutationId
		pendingMFA
	}
}
`

func (c *Client) DeleteAzureEnv(ctx context.Context, input DeleteAzureEnvInput, interceptors ...clientv2.RequestInterceptor) (*DeleteAzureEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res DeleteAzureEnv
	if err := c.Client.Post(ctx, "DeleteAzureEnv", DeleteAzureEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGCPEnvDocument = `query GetGCPEnv ($name: String!) {
	gcpEnv(name: $name) {
		name
		spec {
			... GCPEnvSpecFragment
		}
		specRevision
	}
}
fragment GCPEnvSpecFragment on GCPEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
		}
		internal {
			enabled
			sourceIPRanges
		}
	}
	loadBalancingStrategy
	customDomain
	nodeGroups {
		name
		nodeType
		capacityPerZone
		zones
		reservations
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	region
	zones
	cidr
	gcpProjectId
	cloudConnect
}
`

func (c *Client) GetGCPEnv(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetGCPEnv, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetGCPEnv
	if err := c.Client.Post(ctx, "GetGCPEnv", GetGCPEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGCPEnvStatusDocument = `query GetGCPEnvStatus ($name: String!) {
	gcpEnv(name: $name) {
		name
		specRevision
		status {
			appliedSpecRevision
			pendingDelete
			errors {
				code
				message
			}
		}
	}
}
`

func (c *Client) GetGCPEnvStatus(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetGCPEnvStatus, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetGCPEnvStatus
	if err := c.Client.Post(ctx, "GetGCPEnvStatus", GetGCPEnvStatusDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGCPEnvDocument = `mutation CreateGCPEnv ($input: CreateGCPEnvInput!) {
	createGCPEnv(input: $input) {
		mutationId
		spec {
			... GCPEnvSpecFragment
		}
		specRevision
	}
}
fragment GCPEnvSpecFragment on GCPEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
		}
		internal {
			enabled
			sourceIPRanges
		}
	}
	loadBalancingStrategy
	customDomain
	nodeGroups {
		name
		nodeType
		capacityPerZone
		zones
		reservations
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	region
	zones
	cidr
	gcpProjectId
	cloudConnect
}
`

func (c *Client) CreateGCPEnv(ctx context.Context, input CreateGCPEnvInput, interceptors ...clientv2.RequestInterceptor) (*CreateGCPEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateGCPEnv
	if err := c.Client.Post(ctx, "CreateGCPEnv", CreateGCPEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGCPEnvDocument = `mutation UpdateGCPEnv ($input: UpdateGCPEnvInput!) {
	updateGCPEnv(input: $input) {
		mutationId
		spec {
			... GCPEnvSpecFragment
		}
		specRevision
	}
}
fragment GCPEnvSpecFragment on GCPEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
		}
		internal {
			enabled
			sourceIPRanges
		}
	}
	loadBalancingStrategy
	customDomain
	nodeGroups {
		name
		nodeType
		capacityPerZone
		zones
		reservations
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	region
	zones
	cidr
	gcpProjectId
	cloudConnect
}
`

func (c *Client) UpdateGCPEnv(ctx context.Context, input UpdateGCPEnvInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGCPEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res UpdateGCPEnv
	if err := c.Client.Post(ctx, "UpdateGCPEnv", UpdateGCPEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteGCPEnvDocument = `mutation DeleteGCPEnv ($input: DeleteGCPEnvInput!) {
	deleteGCPEnv(input: $input) {
		mutationId
		pendingMFA
	}
}
`

func (c *Client) DeleteGCPEnv(ctx context.Context, input DeleteGCPEnvInput, interceptors ...clientv2.RequestInterceptor) (*DeleteGCPEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res DeleteGCPEnv
	if err := c.Client.Post(ctx, "DeleteGCPEnv", DeleteGCPEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHCloudEnvDocument = `query GetHCloudEnv ($name: String!) {
	hcloudEnv(name: $name) {
		name
		spec {
			... HCloudEnvSpecFragment
		}
		specRevision
	}
}
fragment HCloudEnvSpecFragment on HCloudEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
		}
		internal {
			enabled
			sourceIPRanges
		}
	}
	loadBalancingStrategy
	customDomain
	nodeGroups {
		name
		nodeType
		capacityPerLocation
		locations
		reservations
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	networkZone
	locations
	cidr
	cloudConnect
	wireguardPeers {
		publicKey
		allowedIPs
		endpoint
	}
}
`

func (c *Client) GetHCloudEnv(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetHCloudEnv, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetHCloudEnv
	if err := c.Client.Post(ctx, "GetHCloudEnv", GetHCloudEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHCloudEnvStatusDocument = `query GetHCloudEnvStatus ($name: String!) {
	hcloudEnv(name: $name) {
		name
		specRevision
		status {
			appliedSpecRevision
			pendingDelete
			errors {
				code
				message
			}
		}
	}
}
`

func (c *Client) GetHCloudEnvStatus(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetHCloudEnvStatus, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetHCloudEnvStatus
	if err := c.Client.Post(ctx, "GetHCloudEnvStatus", GetHCloudEnvStatusDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateHCloudEnvDocument = `mutation CreateHCloudEnv ($input: CreateHCloudEnvInput!) {
	createHCloudEnv(input: $input) {
		mutationId
		spec {
			... HCloudEnvSpecFragment
		}
		specRevision
	}
}
fragment HCloudEnvSpecFragment on HCloudEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
		}
		internal {
			enabled
			sourceIPRanges
		}
	}
	loadBalancingStrategy
	customDomain
	nodeGroups {
		name
		nodeType
		capacityPerLocation
		locations
		reservations
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	networkZone
	locations
	cidr
	cloudConnect
	wireguardPeers {
		publicKey
		allowedIPs
		endpoint
	}
}
`

func (c *Client) CreateHCloudEnv(ctx context.Context, input CreateHCloudEnvInput, interceptors ...clientv2.RequestInterceptor) (*CreateHCloudEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateHCloudEnv
	if err := c.Client.Post(ctx, "CreateHCloudEnv", CreateHCloudEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateHCloudEnvDocument = `mutation UpdateHCloudEnv ($input: UpdateHCloudEnvInput!) {
	updateHCloudEnv(input: $input) {
		mutationId
		spec {
			... HCloudEnvSpecFragment
		}
		specRevision
	}
}
fragment HCloudEnvSpecFragment on HCloudEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
		}
		internal {
			enabled
			sourceIPRanges
		}
	}
	loadBalancingStrategy
	customDomain
	nodeGroups {
		name
		nodeType
		capacityPerLocation
		locations
		reservations
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	networkZone
	locations
	cidr
	cloudConnect
	wireguardPeers {
		publicKey
		allowedIPs
		endpoint
	}
}
`

func (c *Client) UpdateHCloudEnv(ctx context.Context, input UpdateHCloudEnvInput, interceptors ...clientv2.RequestInterceptor) (*UpdateHCloudEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res UpdateHCloudEnv
	if err := c.Client.Post(ctx, "UpdateHCloudEnv", UpdateHCloudEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteHCloudEnvDocument = `mutation DeleteHCloudEnv ($input: DeleteHCloudEnvInput!) {
	deleteHCloudEnv(input: $input) {
		mutationId
		pendingMFA
	}
}
`

func (c *Client) DeleteHCloudEnv(ctx context.Context, input DeleteHCloudEnvInput, interceptors ...clientv2.RequestInterceptor) (*DeleteHCloudEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res DeleteHCloudEnv
	if err := c.Client.Post(ctx, "DeleteHCloudEnv", DeleteHCloudEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetK8SEnvDocument = `query GetK8SEnv ($name: String!) {
	k8sEnv(name: $name) {
		name
		spec {
			... K8SEnvSpecFragment
		}
		specRevision
	}
}
fragment K8SEnvSpecFragment on K8SEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
			annotations {
				key
				value
			}
		}
		internal {
			enabled
			sourceIPRanges
			annotations {
				key
				value
			}
		}
	}
	loadBalancingStrategy
	distribution
	customDomain
	nodeGroups {
		name
		nodeType
		capacityPerZone
		selector {
			key
			value
		}
		tolerations {
			effect
			operator
			key
			value
		}
		reservations
		zones
	}
	customNodeTypes {
		name
		cpuAllocatable
		memAllocatableInBytes
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	metrics {
		retentionPeriodInDays
	}
	logs {
		storage {
			s3 {
				bucketName
				region
			}
			gcs {
				bucketName
			}
		}
	}
}
`

func (c *Client) GetK8SEnv(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetK8SEnv, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetK8SEnv
	if err := c.Client.Post(ctx, "GetK8SEnv", GetK8SEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetK8SEnvStatusDocument = `query GetK8SEnvStatus ($name: String!) {
	k8sEnv(name: $name) {
		name
		specRevision
		status {
			appliedSpecRevision
			pendingDelete
			errors {
				code
				message
			}
		}
	}
}
`

func (c *Client) GetK8SEnvStatus(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetK8SEnvStatus, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetK8SEnvStatus
	if err := c.Client.Post(ctx, "GetK8SEnvStatus", GetK8SEnvStatusDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateK8SEnvDocument = `mutation CreateK8SEnv ($input: CreateK8SEnvInput!) {
	createK8SEnv(input: $input) {
		mutationId
		spec {
			... K8SEnvSpecFragment
		}
		specRevision
	}
}
fragment K8SEnvSpecFragment on K8SEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
			annotations {
				key
				value
			}
		}
		internal {
			enabled
			sourceIPRanges
			annotations {
				key
				value
			}
		}
	}
	loadBalancingStrategy
	distribution
	customDomain
	nodeGroups {
		name
		nodeType
		capacityPerZone
		selector {
			key
			value
		}
		tolerations {
			effect
			operator
			key
			value
		}
		reservations
		zones
	}
	customNodeTypes {
		name
		cpuAllocatable
		memAllocatableInBytes
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	metrics {
		retentionPeriodInDays
	}
	logs {
		storage {
			s3 {
				bucketName
				region
			}
			gcs {
				bucketName
			}
		}
	}
}
`

func (c *Client) CreateK8SEnv(ctx context.Context, input CreateK8SEnvInput, interceptors ...clientv2.RequestInterceptor) (*CreateK8SEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateK8SEnv
	if err := c.Client.Post(ctx, "CreateK8SEnv", CreateK8SEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateK8SEnvDocument = `mutation UpdateK8SEnv ($input: UpdateK8SEnvInput!) {
	updateK8SEnv(input: $input) {
		mutationId
		spec {
			... K8SEnvSpecFragment
		}
		specRevision
	}
}
fragment K8SEnvSpecFragment on K8SEnvSpec {
	loadBalancers {
		public {
			enabled
			sourceIPRanges
			annotations {
				key
				value
			}
		}
		internal {
			enabled
			sourceIPRanges
			annotations {
				key
				value
			}
		}
	}
	loadBalancingStrategy
	distribution
	customDomain
	nodeGroups {
		name
		nodeType
		capacityPerZone
		selector {
			key
			value
		}
		tolerations {
			effect
			operator
			key
			value
		}
		reservations
		zones
	}
	customNodeTypes {
		name
		cpuAllocatable
		memAllocatableInBytes
	}
	maintenanceWindows {
		name
		enabled
		hour
		lengthInHours
		days
	}
	metrics {
		retentionPeriodInDays
	}
	logs {
		storage {
			s3 {
				bucketName
				region
			}
			gcs {
				bucketName
			}
		}
	}
}
`

func (c *Client) UpdateK8SEnv(ctx context.Context, input UpdateK8SEnvInput, interceptors ...clientv2.RequestInterceptor) (*UpdateK8SEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res UpdateK8SEnv
	if err := c.Client.Post(ctx, "UpdateK8SEnv", UpdateK8SEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteK8SEnvDocument = `mutation DeleteK8SEnv ($input: DeleteK8SEnvInput!) {
	deleteK8SEnv(input: $input) {
		mutationId
		pendingMFA
	}
}
`

func (c *Client) DeleteK8SEnv(ctx context.Context, input DeleteK8SEnvInput, interceptors ...clientv2.RequestInterceptor) (*DeleteK8SEnv, error) {
	vars := map[string]any{
		"input": input,
	}

	var res DeleteK8SEnv
	if err := c.Client.Post(ctx, "DeleteK8SEnv", DeleteK8SEnvDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	GetAWSEnvDocument:          "GetAWSEnv",
	GetAWSEnvStatusDocument:    "GetAWSEnvStatus",
	CreateAWSEnvDocument:       "CreateAWSEnv",
	UpdateAWSEnvDocument:       "UpdateAWSEnv",
	DeleteAWSEnvDocument:       "DeleteAWSEnv",
	GetAzureEnvDocument:        "GetAzureEnv",
	GetAzureEnvStatusDocument:  "GetAzureEnvStatus",
	CreateAzureEnvDocument:     "CreateAzureEnv",
	UpdateAzureEnvDocument:     "UpdateAzureEnv",
	DeleteAzureEnvDocument:     "DeleteAzureEnv",
	GetGCPEnvDocument:          "GetGCPEnv",
	GetGCPEnvStatusDocument:    "GetGCPEnvStatus",
	CreateGCPEnvDocument:       "CreateGCPEnv",
	UpdateGCPEnvDocument:       "UpdateGCPEnv",
	DeleteGCPEnvDocument:       "DeleteGCPEnv",
	GetHCloudEnvDocument:       "GetHCloudEnv",
	GetHCloudEnvStatusDocument: "GetHCloudEnvStatus",
	CreateHCloudEnvDocument:    "CreateHCloudEnv",
	UpdateHCloudEnvDocument:    "UpdateHCloudEnv",
	DeleteHCloudEnvDocument:    "DeleteHCloudEnv",
	GetK8SEnvDocument:          "GetK8SEnv",
	GetK8SEnvStatusDocument:    "GetK8SEnvStatus",
	CreateK8SEnvDocument:       "CreateK8SEnv",
	UpdateK8SEnvDocument:       "UpdateK8SEnv",
	DeleteK8SEnvDocument:       "DeleteK8SEnv",
}
